/*
  File autogenerated by gengetopt version 2.22.6
  generated with the following command:
  gengetopt -C --no-handle-help --no-handle-version

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef FIX_UNUSED
#define FIX_UNUSED(X) (void) (X) /* avoid warnings for unused params */
#endif

#include <getopt.h>

#include "cmdline.h"

const char *gengetopt_args_info_purpose = "";

const char *gengetopt_args_info_usage = "Usage: " CMDLINE_PARSER_PACKAGE " [OPTIONS]...";

const char *gengetopt_args_info_versiontext = "";

const char *gengetopt_args_info_description = "";

const char *gengetopt_args_info_help[] = {
  "  -h, --help                    Print help and exit",
  "  -V, --version                 Print version and exit",
  "  -f, --fg                      Run in foreground  (default=off)",
  "  -d, --debug                   Run in debug mode  (default=off)",
  "  -b, --bin=STRING              Binary config file",
  "  -r, --reload                  Send reload after reconfigure  (default=off)",
  "  -F, --forgiving               Forgiving of many configuration errors\n                                  (default=off)",
  "      --debugfacility=INT       Which modules to print debug messages for\n                                  (default=`1')",
  "      --logfacility=INT         Syslog facility to be used for logging (default\n                                  LOG_DAEMON)  (default=`3')",
  "      --loglevel=INT            Syslog log level to use in setlogmask (0 emerg,\n                                  7 debug)  (default=`6')",
  "  -c, --conf=STRING             Read configuration file",
  "      --interval=INT            Re-read configuration file at this interval\n                                  (default=`3600')",
  "      --pidfile=STRING          Filename of process id file",
  "      --statedir=STRING         Directory of nonvolatile data",
  "      --uid=INT                 UID to run as, after being started as root\n                                  (default=`0')",
  "      --gid=INT                 GID to run as, after being started as root\n                                  (default=`0')",
  "  -n, --net=STRING              Network  (default=`192.168.182.0/24')",
  "      --dhcpstart=INT           Network DHCP Starting IP  (default=`0')",
  "      --dhcpend=INT             Network DHCP Ending IP  (default=`0')",
  "      --dhcpbroadcast           Always broadcast DHCP responses  (default=off)",
  "      --dynip=STRING            Dynamic IP address pool",
  "      --nodynip                 No Dynamic IP assignment  (default=off)",
  "      --statip=STRING           Static IP address pool",
  "      --uamanyipex=STRING       Network to exclude from uamanyip",
  "      --uamnatanyipex=STRING    Network to exclude from uamnatanyip",
  "      --dns1=STRING             Primary DNS server IP address",
  "      --dns2=STRING             Secondary DNS server IP address",
  "      --domain=STRING           Domain to use for DNS lookups\n                                  (default=`coova.org')",
  "      --ipup=STRING             Script to run after link-up",
  "      --ipdown=STRING           Script to run after link-down",
  "      --conup=STRING            Script to run after user logon",
  "      --condown=STRING          Script to run after user logoff",
  "      --macup=STRING            Script to run after initial DHCP",
  "      --macdown=STRING          Script to run after DHCP release",
  "      --vlanupdate=STRING       Script to run after 802.1Q/VLAN id assignment",
  "      --vlanlocation            VLAN is to be used as location  (default=off)",
  "      --locationupdate=STRING   Script to run after change of location",
  "      --locationstopstart       Restart the RADIUS accounting stream with new\n                                  session-id  (default=off)",
  "      --locationcopycalled      Copy Called-Station-Id from proxy RADIUS\n                                  (default=off)",
  "      --locationimmediateupdate Immediately do an accounting interim update on\n                                  proxy accounting  (default=off)",
  "      --locationopt82           Use DHCP Option 82 for location  (default=off)",
  "      --txqlen=INT              TX Queue length for tun interface (linux only)\n                                  (default=`100')",
  "      --tundev=STRING           TUN/TAP Device, as in tun0 or tap1",
  "      --mtu=INT                 MTU given in DHCP  (default=`1500')",
  "      --autostatip=INT          Auto- static ip assignment  (default=`0')",
  "      --mmapring                Enable use of MMAP Rings (in Linux only)\n                                  (default=off)",
  "      --ringsize=INT            TX/RX Ring Size (in kbytes; linux only)\n                                  (default=`0')",
  "      --sndbuf=INT              SNDBUF size (in kb)  (default=`0')",
  "      --rcvbuf=INT              RCVBUF size (in kb)  (default=`0')",
  "      --childmax=INT            Maximum number of child processes\n                                  (default=`128')",
  "      --peerid=INT              Cluster peer ID  (default=`0')",
  "      --peerkey=STRING          Cluster Blowfish key",
  "      --radiuslisten=STRING     IP address to send from",
  "      --radiusserver1=STRING    IP address of radius server 1",
  "      --radiusserver2=STRING    IP address of radius server 2",
  "      --radiusauthport=INT      Authentication UDP port of radius server\n                                  (default=`1812')",
  "      --radiusacctport=INT      Accounting UDP port of radius server\n                                  (default=`1813')",
  "      --radiussecret=STRING     Radius shared secret  (default=`testing123')",
  "      --radiustimeout=INT       Retry timeout in seconds  (default=`10')",
  "      --radiusretry=INT         Total number of retries  (default=`4')",
  "      --radiusretrysec=INT      Number of retries before using secondary\n                                  (default=`2')",
  "      --radiusnasid=STRING      Radius NAS-Identifier  (default=`nas01')",
  "      --radiuslocationid=STRING WISPr Location ID",
  "      --radiuslocationname=STRING\n                                WISPr Location Name",
  "      --locationname=STRING     Location Name",
  "      --radiusnasporttype=INT   Radius NAS-Port-Type  (default=`19')",
  "      --coaport=INT             Radius disconnect port to listen to\n                                  (default=`0')",
  "      --coanoipcheck            Allow radius disconnect from any IP\n                                  (default=off)",
  "      --noradallow              Allow all sessions when RADIUS is not available\n                                  (default=off)",
  "      --proxylisten=STRING      Proxy IP address to listen on",
  "      --proxyport=INT           Proxy UDP port to listen on (0 is off)\n                                  (default=`0')",
  "      --proxyclient=STRING      IP address of proxy client(s)",
  "      --proxysecret=STRING      Radius proxy shared secret",
  "      --proxymacaccept          Auto-accept non-EAP requests on proxy port\n                                  (default=off)",
  "      --proxyonacct             Proxy through to chilli RADIUS accounting\n                                  packets  (default=off)",
  "      --proxylocattr=STRING     The attribute in proxy to be used for the loc=\n                                  query string parameter",
  "      --dhcpif=STRING           Local Ethernet interface",
  "      --moreif=STRING           Multi-LAN more interfaces",
  "      --dhcpmac=STRING          DHCP Interface MAC Address",
  "      --dhcpmacset              Option to have dhcpif configured with dhcpmac\n                                  (default=off)",
  "      --nexthop=STRING          Next Hop MAC address",
  "      --dhcpradius              Map certain DHCP options to RADIUS attributes\n                                  (default=off)",
  "      --dhcpgateway=STRING      DHCP gateway addresss for relay",
  "      --dhcpgatewayport=INT     DHCP gateway port for relay  (default=`67')",
  "      --dhcprelayagent=STRING   DHCP relay agent IP addresss (default\n                                  uamlisten)",
  "      --lease=INT               Lease time to allocate to clients\n                                  (default=`600')",
  "      --leaseplus=INT           Lease grace period time before removal\n                                  (default=`60')",
  "      --noc2c                   Setup clients for /32 network  (default=off)",
  "      --eapolenable             Enable IEEE 802.1x authentication\n                                  (default=off)",
  "      --uamserver=STRING        URL of authentication web server",
  "      --uamhomepage=STRING      URL of homepage to redirect unauthenticated\n                                  users to",
  "      --uamsecret=STRING        Shared secret between uamserver and chilli",
  "      --uamlisten=STRING        IP address to listen to for authentication\n                                  requests",
  "      --dhcplisten=STRING       IP address for DHCP default gateway (defaults\n                                  to uamlisten)",
  "      --uamport=INT             TCP port to bind to for authentication requests\n                                  (default=`3990')",
  "      --uamuiport=INT           TCP port to bind to for UAM UI requests\n                                  (default=`3991')",
  "      --uamallowed=STRING       Resources exempt from access check ",
  "      --uamdomain=STRING        Domain name allowed (active dns filtering; one\n                                  per line!) ",
  "      --uamdomainttl=INT        DNS TTL to use (rewrite) when query matches a\n                                  uamdomain  (default=`60')",
  "      --uamregex=STRING         Regular expression to match URLs (one per line)\n                                   ",
  "      --nosystemdns             Do not attempt to use the system DNS for DHCP\n                                  (default=off)",
  "      --uamanydns               Allow client to use any DNS server\n                                  (default=off)",
  "      --uamanyip                Allow client to use any IP Address\n                                  (default=off)",
  "      --uamnatanyip             Source NAT clients using anyip to an IP of\n                                  dynip pool  (default=off)",
  "      --wisprlogin=STRING       A specific WISPr login url to be used",
  "      --nouamsuccess            Do not return to the UAM server on success,\n                                  original url instead  (default=off)",
  "      --nowispr1                Do not offer WISPr 1.0 XML  (default=off)",
  "      --nowispr2                Do not offer WISPr 2.0 XML  (default=off)",
  "      --uamlogoutip=STRING      HTTP Auto-Logout IP Address\n                                  (default=`1.0.0.0')",
  "      --uamaliasip=STRING       Special IP Address aliased (redirect) to\n                                  uamlisten/uamport  (default=`1.0.0.1')",
  "      --uamaliasname=STRING     Special simple hostname (no dots) to be\n                                  resolved to uamaliasip",
  "      --uamhostname=STRING      Special simple hostname (no dots) to be\n                                  resolved to uamlisten",
  "      --authedallowed=STRING    Resources exempt from session limitations",
  "      --uamauthedallowed        Use uamallowed as resources exempt from session\n                                  limitations  (default=off)",
  "      --uamaaaurl=STRING        UAM AAA URL specifying the URL to use for the\n                                  Chilli HTTP AAA",
  "      --domaindnslocal          Option to consider all hostnames in domain as\n                                  local  (default=off)",
  "      --radsec                  Use RadSec tunning (requires SSL; not\n                                  compatible with uamaaaurl)  (default=off)",
  "      --defsessiontimeout=LONG  Default session-timeout if not returned by\n                                  RADIUS  (default=`0')",
  "      --defidletimeout=INT      Default idle-timeout if not returned by RADIUS\n                                  (default=`0')",
  "      --defbandwidthmaxdown=LONG\n                                Default WISPr-Bandwidth-Max-Down if not\n                                  returned by RADIUS  (default=`0')",
  "      --defbandwidthmaxup=LONG  Default WISPr-Bandwidth-Max-Up if not returned\n                                  by RADIUS  (default=`0')",
  "      --definteriminterval=INT  Default interim-interval for accounting if not\n                                  returned by RADIUS  (default=`300')",
  "      --bwbucketupsize=INT      Define the up-bound 'leaky bucket' size\n                                  (default=`0')",
  "      --bwbucketdnsize=INT      Define the down-bound 'leaky bucket' size\n                                  (default=`0')",
  "      --bwbucketminsize=INT     Define the minimum 'leaky bucket' size\n                                  (default=`0')",
  "      --macauth                 Authenticate based on MAC address\n                                  (default=off)",
  "      --macreauth               Re-Authenticate based on MAC address for every\n                                  initial URL redirection  (default=off)",
  "      --macauthdeny             Deny access (even UAM) to MAC addresses given\n                                  Access-Reject  (default=off)",
  "      --macallowed=STRING       List of allowed MAC addresses",
  "      --macsuffix=STRING        Suffix to add to the MAC address",
  "      --macpasswd=STRING        Password used when performing MAC\n                                  authentication",
  "      --macallowlocal           Do not use RADIUS for authenticating the\n                                  macallowed  (default=off)",
  "      --strictmacauth           Be strict about MAC Auth (no DHCP reply until\n                                  we get RADIUS reply)  (default=off)",
  "      --strictdhcp              Be strict about only allocating dyn-pool from\n                                  DHCP  (default=off)",
  "      --wwwdir=STRING           Local content served by chilli (for splash\n                                  page, etc)",
  "      --wwwbin=STRING           Script binary (such as haserl) for simple web\n                                  programming",
  "      --uamui=STRING            Program in inetd style to handle all uam\n                                  requests",
  "      --adminuser=STRING        RADIUS administrative user login username",
  "      --adminpasswd=STRING      RADIUS administrative user login password",
  "      --adminupdatefile=STRING  File for administrative user CoovaChilli-Config\n                                  settings",
  "      --rtmonfile=STRING        File to update with routing settings",
  "      --ethers=STRING           File containing a mapping of MAC addresses to\n                                  static IP addresses",
  "      --nasmac=STRING           Unique MAC address of the NAS\n                                  (called-station-id)",
  "      --nasip=STRING            Unique IP address of the NAS (nas-ip-address)",
  "      --ssid=STRING             SSID of the session",
  "      --vlan=STRING             VLAN of the session",
  "      --ieee8021q               Support 802.1Q VLAN tagging  (default=off)",
  "      --only8021q               Support 802.1Q VLAN tagged traffic only\n                                  (default=off)",
  "      --cmdsocket=STRING        path to the command unix socket",
  "      --cmdsocketport=INT       Port of command socket. Only used if cmdsocket\n                                  is not defined.  (default=`42424')",
  "      --radiusoriginalurl       Turn on the sending of CoovaChilli-OriginalURL\n                                  in Access-Request  (default=off)",
  "      --swapoctets              Swap the meaning of input/output octets/packets\n                                  (default=off)",
  "      --usestatusfile=STRING    Use the status file to keep track of sessions",
  "      --statusfilesave          Aggressively save the status of sessions to\n                                  status file  (default=off)",
  "      --localusers=STRING       File keep 'Local' usernames and passwords",
  "      --postauthproxy=STRING    IP of an upstream transparent proxy",
  "      --postauthproxyport=INT   Port of an upstream transparent proxy\n                                  (default=`0')",
  "      --postauthproxyssl        Send SSL to upstream transparent proxy\n                                  (default=off)",
  "      --wpaguests               Allow WPA 'Guest' access  (default=off)",
  "      --openidauth              Allow OpenID authentication  (default=off)",
  "      --papalwaysok             Always allow 'PAP' authentication (depreciated;\n                                  always on)  (default=off)",
  "      --mschapv2                Use MSCHAPv2 authentication where possible\n                                  (default=off)",
  "      --chillixml               Use CoovaChilli XML in WISPr blocks\n                                  (default=off)",
  "      --acctupdate              Allow updating of session attributes in\n                                  Accounting-Response  (default=off)",
  "      --dnsparanoia             Inspect DNS packets and drop responses with any\n                                  non- A, CNAME, SOA, or MX records (to prevent\n                                  dns tunnels)  (default=off)",
  "      --seskeepalive            Keep sessions 'alive' after a restart of the\n                                  server  (default=off)",
  "      --wpadpacfile=STRING      WPAD PAC file location",
  "      --usetap                  Use a TAP instead of TUN (linux only)\n                                  (default=off)",
  "      --noarpentries            Do not create arp table entries in when using\n                                  TAP.  (default=off)",
  "      --routeif=STRING          Turns on 'multi-routing' and defines default\n                                  route",
  "      --framedservice           Use Service-Type = Framed instead of Login\n                                  (default=off)",
  "      --tcpwin=INT              Change TCP window size to this value to help\n                                  prevent congestion  (default=`0')",
  "      --scalewin                Scale the TCP window when bandwidth shaping\n                                  (default=off)",
  "      --tcpmss=INT              Change TCP maximum window size (mss) option in\n                                  TCP traffic  (default=`0')",
  "      --maxclients=INT          Maximum number of clients/subscribers\n                                  (default=`512')",
  "      --dhcphashsize=INT        Size of DHCP/MAC hash table  (default=`56')",
  "      --radiusqsize=INT         Size of RADIUS queue table  (default=`0')",
  "      --nochallenge             Disable the use of the challenge (PAP only)\n                                  (default=off)",
  "      --challengetimeout=INT    Timeout in seconds for the generated challenge\n                                  (default=`600')",
  "      --challengetimeout2=INT   Timeout in seconds for challenge during login\n                                  (default=`1200')",
  "      --redir                   Enable redir (redirection) daemon\n                                  (default=off)",
  "      --inject=STRING           Enable redir injection",
  "      --injectext=STRING        Enable redir injection extended script",
  "      --injectwispr             Enable redir injection of WISPr  (default=off)",
  "      --redirurl                Send redirection URL in UAM parameters instead\n                                  of HTTP redirect  (default=off)",
  "      --routeonetone            When using routeif, do one-to-one NAT\n                                  (default=off)",
  "      --nousergardendata        Do not consider walled garden for authorized\n                                  session accounting  (default=off)",
  "      --uamgardendata           Enable a RADIUS accounting session for walled\n                                  garden data based on IP lease life-cycle\n                                  (default=off)",
  "      --uamotherdata            Enable accounting for dropped 'Other' of IP\n                                  session  (default=off)",
  "      --sslkeyfile=STRING       SSL private key file in PEM format",
  "      --sslkeypass=STRING       SSL private key password",
  "      --sslcertfile=STRING      SSL certificate file in PEM format",
  "      --sslcafile=STRING        SSL CA certificate file in PEM format",
  "      --unixipc=STRING          The UNIX IPC Filename to use when compiled with\n                                  --with-unixipc",
  "      --uamallowpost            Enable to allow a HTTP POST to the standard\n                                  uamport interface  (default=off)",
  "      --natip=STRING            IP to use when doing nat on WAN (routeidx)",
  "      --natport=INT             Port to use when oding nat on the WAN\n                                  (routeidx)  (default=`0')",
  "      --redirssl                Enable redirection of SSL/HTTP port (requires\n                                  SSL support)  (default=off)",
  "      --uamuissl                Enable SSL/HTTPS support on the uamuiport\n                                  (default=off)",
  "      --dnslog=STRING           Log DNS requests to a file.",
  "      --ipwhitelist=STRING      Binary IP White List file",
  "      --uamdomainfile=STRING    Load uamdomains (regex) from file",
  "      --layer3                  Layer3 only  (default=off)",
  "      --ipsrcallowed=STRING     List of allowed source IP addresses, for Layer3",
  "      --patricia                Use patricia tries for walled garden lookup\n                                  (default=off)",
  "      --redirdnsreq             Send DNS query on redirect to pick of DNS based\n                                  walled garden  (default=off)",
  "      --kname=STRING            Enable the use of the coova kernel module\n                                  instance of this namem",
  "      --moddir=STRING           Directory for dynamically loaded modules",
  "      --module=STRING           Dynamically loaded module",
  "      --dhcpopt=STRING          Set a DHCP option using a hex string",
  "      --extadmvsa=STRING        Extended administrative-user VSA script support",
  "      --dhcpnotidle             DHCP counted for preventing idle-timeout\n                                  (default=off)",
  "      --forcedns1=STRING        Force all DNS to a specific address",
  "      --forcedns1port=INT       Force all DNS to a specific port  (default=`0')",
  "      --forcedns2=STRING        Force all secondary DNS to a specific address",
  "      --forcedns2port=INT       Force all secondary DNS to a specific port\n                                  (default=`0')",
  "      --dnspersession           Enable DNS servers per session  (default=off)",
  "      --ipv6                    Enable IPv6 support  (default=off)",
  "      --ipv6mode=STRING         IPv6 mode is either 6and4 (default), 4to6, or\n                                  6to4",
  "      --ipv6only                Enable IPv6-Only  (default=off)",
    0
};

typedef enum {ARG_NO
  , ARG_FLAG
  , ARG_STRING
  , ARG_INT
  , ARG_LONG
} cmdline_parser_arg_type;

static
void clear_given (struct gengetopt_args_info *args_info);
static
void clear_args (struct gengetopt_args_info *args_info);

static int
cmdline_parser_internal (int argc, char **argv, struct gengetopt_args_info *args_info,
                        struct cmdline_parser_params *params, const char *additional_error);

static int
cmdline_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error);
struct line_list
{
  char * string_arg;
  struct line_list * next;
};

static struct line_list *cmd_line_list = 0;
static struct line_list *cmd_line_list_tmp = 0;

static void
free_cmd_list(void)
{
  /* free the list of a previous call */
  if (cmd_line_list)
    {
      while (cmd_line_list) {
        cmd_line_list_tmp = cmd_line_list;
        cmd_line_list = cmd_line_list->next;
        free (cmd_line_list_tmp->string_arg);
        free (cmd_line_list_tmp);
      }
    }
}


static char *
gengetopt_strdup (const char *s);

static
void clear_given (struct gengetopt_args_info *args_info)
{
  args_info->help_given = 0 ;
  args_info->version_given = 0 ;
  args_info->fg_given = 0 ;
  args_info->debug_given = 0 ;
  args_info->bin_given = 0 ;
  args_info->reload_given = 0 ;
  args_info->forgiving_given = 0 ;
  args_info->debugfacility_given = 0 ;
  args_info->logfacility_given = 0 ;
  args_info->loglevel_given = 0 ;
  args_info->conf_given = 0 ;
  args_info->interval_given = 0 ;
  args_info->pidfile_given = 0 ;
  args_info->statedir_given = 0 ;
  args_info->uid_given = 0 ;
  args_info->gid_given = 0 ;
  args_info->net_given = 0 ;
  args_info->dhcpstart_given = 0 ;
  args_info->dhcpend_given = 0 ;
  args_info->dhcpbroadcast_given = 0 ;
  args_info->dynip_given = 0 ;
  args_info->nodynip_given = 0 ;
  args_info->statip_given = 0 ;
  args_info->uamanyipex_given = 0 ;
  args_info->uamnatanyipex_given = 0 ;
  args_info->dns1_given = 0 ;
  args_info->dns2_given = 0 ;
  args_info->domain_given = 0 ;
  args_info->ipup_given = 0 ;
  args_info->ipdown_given = 0 ;
  args_info->conup_given = 0 ;
  args_info->condown_given = 0 ;
  args_info->macup_given = 0 ;
  args_info->macdown_given = 0 ;
  args_info->vlanupdate_given = 0 ;
  args_info->vlanlocation_given = 0 ;
  args_info->locationupdate_given = 0 ;
  args_info->locationstopstart_given = 0 ;
  args_info->locationcopycalled_given = 0 ;
  args_info->locationimmediateupdate_given = 0 ;
  args_info->locationopt82_given = 0 ;
  args_info->txqlen_given = 0 ;
  args_info->tundev_given = 0 ;
  args_info->mtu_given = 0 ;
  args_info->autostatip_given = 0 ;
  args_info->mmapring_given = 0 ;
  args_info->ringsize_given = 0 ;
  args_info->sndbuf_given = 0 ;
  args_info->rcvbuf_given = 0 ;
  args_info->childmax_given = 0 ;
  args_info->peerid_given = 0 ;
  args_info->peerkey_given = 0 ;
  args_info->radiuslisten_given = 0 ;
  args_info->radiusserver1_given = 0 ;
  args_info->radiusserver2_given = 0 ;
  args_info->radiusauthport_given = 0 ;
  args_info->radiusacctport_given = 0 ;
  args_info->radiussecret_given = 0 ;
  args_info->radiustimeout_given = 0 ;
  args_info->radiusretry_given = 0 ;
  args_info->radiusretrysec_given = 0 ;
  args_info->radiusnasid_given = 0 ;
  args_info->radiuslocationid_given = 0 ;
  args_info->radiuslocationname_given = 0 ;
  args_info->locationname_given = 0 ;
  args_info->radiusnasporttype_given = 0 ;
  args_info->coaport_given = 0 ;
  args_info->coanoipcheck_given = 0 ;
  args_info->noradallow_given = 0 ;
  args_info->proxylisten_given = 0 ;
  args_info->proxyport_given = 0 ;
  args_info->proxyclient_given = 0 ;
  args_info->proxysecret_given = 0 ;
  args_info->proxymacaccept_given = 0 ;
  args_info->proxyonacct_given = 0 ;
  args_info->proxylocattr_given = 0 ;
  args_info->dhcpif_given = 0 ;
  args_info->moreif_given = 0 ;
  args_info->dhcpmac_given = 0 ;
  args_info->dhcpmacset_given = 0 ;
  args_info->nexthop_given = 0 ;
  args_info->dhcpradius_given = 0 ;
  args_info->dhcpgateway_given = 0 ;
  args_info->dhcpgatewayport_given = 0 ;
  args_info->dhcprelayagent_given = 0 ;
  args_info->lease_given = 0 ;
  args_info->leaseplus_given = 0 ;
  args_info->noc2c_given = 0 ;
  args_info->eapolenable_given = 0 ;
  args_info->uamserver_given = 0 ;
  args_info->uamhomepage_given = 0 ;
  args_info->uamsecret_given = 0 ;
  args_info->uamlisten_given = 0 ;
  args_info->dhcplisten_given = 0 ;
  args_info->uamport_given = 0 ;
  args_info->uamuiport_given = 0 ;
  args_info->uamallowed_given = 0 ;
  args_info->uamdomain_given = 0 ;
  args_info->uamdomainttl_given = 0 ;
  args_info->uamregex_given = 0 ;
  args_info->nosystemdns_given = 0 ;
  args_info->uamanydns_given = 0 ;
  args_info->uamanyip_given = 0 ;
  args_info->uamnatanyip_given = 0 ;
  args_info->wisprlogin_given = 0 ;
  args_info->nouamsuccess_given = 0 ;
  args_info->nowispr1_given = 0 ;
  args_info->nowispr2_given = 0 ;
  args_info->uamlogoutip_given = 0 ;
  args_info->uamaliasip_given = 0 ;
  args_info->uamaliasname_given = 0 ;
  args_info->uamhostname_given = 0 ;
  args_info->authedallowed_given = 0 ;
  args_info->uamauthedallowed_given = 0 ;
  args_info->uamaaaurl_given = 0 ;
  args_info->domaindnslocal_given = 0 ;
  args_info->radsec_given = 0 ;
  args_info->defsessiontimeout_given = 0 ;
  args_info->defidletimeout_given = 0 ;
  args_info->defbandwidthmaxdown_given = 0 ;
  args_info->defbandwidthmaxup_given = 0 ;
  args_info->definteriminterval_given = 0 ;
  args_info->bwbucketupsize_given = 0 ;
  args_info->bwbucketdnsize_given = 0 ;
  args_info->bwbucketminsize_given = 0 ;
  args_info->macauth_given = 0 ;
  args_info->macreauth_given = 0 ;
  args_info->macauthdeny_given = 0 ;
  args_info->macallowed_given = 0 ;
  args_info->macsuffix_given = 0 ;
  args_info->macpasswd_given = 0 ;
  args_info->macallowlocal_given = 0 ;
  args_info->strictmacauth_given = 0 ;
  args_info->strictdhcp_given = 0 ;
  args_info->wwwdir_given = 0 ;
  args_info->wwwbin_given = 0 ;
  args_info->uamui_given = 0 ;
  args_info->adminuser_given = 0 ;
  args_info->adminpasswd_given = 0 ;
  args_info->adminupdatefile_given = 0 ;
  args_info->rtmonfile_given = 0 ;
  args_info->ethers_given = 0 ;
  args_info->nasmac_given = 0 ;
  args_info->nasip_given = 0 ;
  args_info->ssid_given = 0 ;
  args_info->vlan_given = 0 ;
  args_info->ieee8021q_given = 0 ;
  args_info->only8021q_given = 0 ;
  args_info->cmdsocket_given = 0 ;
  args_info->cmdsocketport_given = 0 ;
  args_info->radiusoriginalurl_given = 0 ;
  args_info->swapoctets_given = 0 ;
  args_info->usestatusfile_given = 0 ;
  args_info->statusfilesave_given = 0 ;
  args_info->localusers_given = 0 ;
  args_info->postauthproxy_given = 0 ;
  args_info->postauthproxyport_given = 0 ;
  args_info->postauthproxyssl_given = 0 ;
  args_info->wpaguests_given = 0 ;
  args_info->openidauth_given = 0 ;
  args_info->papalwaysok_given = 0 ;
  args_info->mschapv2_given = 0 ;
  args_info->chillixml_given = 0 ;
  args_info->acctupdate_given = 0 ;
  args_info->dnsparanoia_given = 0 ;
  args_info->seskeepalive_given = 0 ;
  args_info->wpadpacfile_given = 0 ;
  args_info->usetap_given = 0 ;
  args_info->noarpentries_given = 0 ;
  args_info->routeif_given = 0 ;
  args_info->framedservice_given = 0 ;
  args_info->tcpwin_given = 0 ;
  args_info->scalewin_given = 0 ;
  args_info->tcpmss_given = 0 ;
  args_info->maxclients_given = 0 ;
  args_info->dhcphashsize_given = 0 ;
  args_info->radiusqsize_given = 0 ;
  args_info->nochallenge_given = 0 ;
  args_info->challengetimeout_given = 0 ;
  args_info->challengetimeout2_given = 0 ;
  args_info->redir_given = 0 ;
  args_info->inject_given = 0 ;
  args_info->injectext_given = 0 ;
  args_info->injectwispr_given = 0 ;
  args_info->redirurl_given = 0 ;
  args_info->routeonetone_given = 0 ;
  args_info->nousergardendata_given = 0 ;
  args_info->uamgardendata_given = 0 ;
  args_info->uamotherdata_given = 0 ;
  args_info->sslkeyfile_given = 0 ;
  args_info->sslkeypass_given = 0 ;
  args_info->sslcertfile_given = 0 ;
  args_info->sslcafile_given = 0 ;
  args_info->unixipc_given = 0 ;
  args_info->uamallowpost_given = 0 ;
  args_info->natip_given = 0 ;
  args_info->natport_given = 0 ;
  args_info->redirssl_given = 0 ;
  args_info->uamuissl_given = 0 ;
  args_info->dnslog_given = 0 ;
  args_info->ipwhitelist_given = 0 ;
  args_info->uamdomainfile_given = 0 ;
  args_info->layer3_given = 0 ;
  args_info->ipsrcallowed_given = 0 ;
  args_info->patricia_given = 0 ;
  args_info->redirdnsreq_given = 0 ;
  args_info->kname_given = 0 ;
  args_info->moddir_given = 0 ;
  args_info->module_given = 0 ;
  args_info->dhcpopt_given = 0 ;
  args_info->extadmvsa_given = 0 ;
  args_info->dhcpnotidle_given = 0 ;
  args_info->forcedns1_given = 0 ;
  args_info->forcedns1port_given = 0 ;
  args_info->forcedns2_given = 0 ;
  args_info->forcedns2port_given = 0 ;
  args_info->dnspersession_given = 0 ;
  args_info->ipv6_given = 0 ;
  args_info->ipv6mode_given = 0 ;
  args_info->ipv6only_given = 0 ;
}

static
void clear_args (struct gengetopt_args_info *args_info)
{
  FIX_UNUSED (args_info);
  args_info->fg_flag = 0;
  args_info->debug_flag = 0;
  args_info->bin_arg = NULL;
  args_info->bin_orig = NULL;
  args_info->reload_flag = 0;
  args_info->forgiving_flag = 0;
  args_info->debugfacility_arg = 1;
  args_info->debugfacility_orig = NULL;
  args_info->logfacility_arg = 3;
  args_info->logfacility_orig = NULL;
  args_info->loglevel_arg = 6;
  args_info->loglevel_orig = NULL;
  args_info->conf_arg = NULL;
  args_info->conf_orig = NULL;
  args_info->interval_arg = 3600;
  args_info->interval_orig = NULL;
  args_info->pidfile_arg = NULL;
  args_info->pidfile_orig = NULL;
  args_info->statedir_arg = NULL;
  args_info->statedir_orig = NULL;
  args_info->uid_arg = 0;
  args_info->uid_orig = NULL;
  args_info->gid_arg = 0;
  args_info->gid_orig = NULL;
  args_info->net_arg = gengetopt_strdup ("192.168.182.0/24");
  args_info->net_orig = NULL;
  args_info->dhcpstart_arg = 0;
  args_info->dhcpstart_orig = NULL;
  args_info->dhcpend_arg = 0;
  args_info->dhcpend_orig = NULL;
  args_info->dhcpbroadcast_flag = 0;
  args_info->dynip_arg = NULL;
  args_info->dynip_orig = NULL;
  args_info->nodynip_flag = 0;
  args_info->statip_arg = NULL;
  args_info->statip_orig = NULL;
  args_info->uamanyipex_arg = NULL;
  args_info->uamanyipex_orig = NULL;
  args_info->uamnatanyipex_arg = NULL;
  args_info->uamnatanyipex_orig = NULL;
  args_info->dns1_arg = NULL;
  args_info->dns1_orig = NULL;
  args_info->dns2_arg = NULL;
  args_info->dns2_orig = NULL;
  args_info->domain_arg = gengetopt_strdup ("coova.org");
  args_info->domain_orig = NULL;
  args_info->ipup_arg = NULL;
  args_info->ipup_orig = NULL;
  args_info->ipdown_arg = NULL;
  args_info->ipdown_orig = NULL;
  args_info->conup_arg = NULL;
  args_info->conup_orig = NULL;
  args_info->condown_arg = NULL;
  args_info->condown_orig = NULL;
  args_info->macup_arg = NULL;
  args_info->macup_orig = NULL;
  args_info->macdown_arg = NULL;
  args_info->macdown_orig = NULL;
  args_info->vlanupdate_arg = NULL;
  args_info->vlanupdate_orig = NULL;
  args_info->vlanlocation_flag = 0;
  args_info->locationupdate_arg = NULL;
  args_info->locationupdate_orig = NULL;
  args_info->locationstopstart_flag = 0;
  args_info->locationcopycalled_flag = 0;
  args_info->locationimmediateupdate_flag = 0;
  args_info->locationopt82_flag = 0;
  args_info->txqlen_arg = 100;
  args_info->txqlen_orig = NULL;
  args_info->tundev_arg = NULL;
  args_info->tundev_orig = NULL;
  args_info->mtu_arg = 1500;
  args_info->mtu_orig = NULL;
  args_info->autostatip_arg = 0;
  args_info->autostatip_orig = NULL;
  args_info->mmapring_flag = 0;
  args_info->ringsize_arg = 0;
  args_info->ringsize_orig = NULL;
  args_info->sndbuf_arg = 0;
  args_info->sndbuf_orig = NULL;
  args_info->rcvbuf_arg = 0;
  args_info->rcvbuf_orig = NULL;
  args_info->childmax_arg = 128;
  args_info->childmax_orig = NULL;
  args_info->peerid_arg = 0;
  args_info->peerid_orig = NULL;
  args_info->peerkey_arg = NULL;
  args_info->peerkey_orig = NULL;
  args_info->radiuslisten_arg = NULL;
  args_info->radiuslisten_orig = NULL;
  args_info->radiusserver1_arg = NULL;
  args_info->radiusserver1_orig = NULL;
  args_info->radiusserver2_arg = NULL;
  args_info->radiusserver2_orig = NULL;
  args_info->radiusauthport_arg = 1812;
  args_info->radiusauthport_orig = NULL;
  args_info->radiusacctport_arg = 1813;
  args_info->radiusacctport_orig = NULL;
  args_info->radiussecret_arg = gengetopt_strdup ("testing123");
  args_info->radiussecret_orig = NULL;
  args_info->radiustimeout_arg = 10;
  args_info->radiustimeout_orig = NULL;
  args_info->radiusretry_arg = 4;
  args_info->radiusretry_orig = NULL;
  args_info->radiusretrysec_arg = 2;
  args_info->radiusretrysec_orig = NULL;
  args_info->radiusnasid_arg = gengetopt_strdup ("nas01");
  args_info->radiusnasid_orig = NULL;
  args_info->radiuslocationid_arg = NULL;
  args_info->radiuslocationid_orig = NULL;
  args_info->radiuslocationname_arg = NULL;
  args_info->radiuslocationname_orig = NULL;
  args_info->locationname_arg = NULL;
  args_info->locationname_orig = NULL;
  args_info->radiusnasporttype_arg = 19;
  args_info->radiusnasporttype_orig = NULL;
  args_info->coaport_arg = 0;
  args_info->coaport_orig = NULL;
  args_info->coanoipcheck_flag = 0;
  args_info->noradallow_flag = 0;
  args_info->proxylisten_arg = NULL;
  args_info->proxylisten_orig = NULL;
  args_info->proxyport_arg = 0;
  args_info->proxyport_orig = NULL;
  args_info->proxyclient_arg = NULL;
  args_info->proxyclient_orig = NULL;
  args_info->proxysecret_arg = NULL;
  args_info->proxysecret_orig = NULL;
  args_info->proxymacaccept_flag = 0;
  args_info->proxyonacct_flag = 0;
  args_info->proxylocattr_arg = NULL;
  args_info->proxylocattr_orig = NULL;
  args_info->dhcpif_arg = NULL;
  args_info->dhcpif_orig = NULL;
  args_info->moreif_arg = NULL;
  args_info->moreif_orig = NULL;
  args_info->dhcpmac_arg = NULL;
  args_info->dhcpmac_orig = NULL;
  args_info->dhcpmacset_flag = 0;
  args_info->nexthop_arg = NULL;
  args_info->nexthop_orig = NULL;
  args_info->dhcpradius_flag = 0;
  args_info->dhcpgateway_arg = NULL;
  args_info->dhcpgateway_orig = NULL;
  args_info->dhcpgatewayport_arg = 67;
  args_info->dhcpgatewayport_orig = NULL;
  args_info->dhcprelayagent_arg = NULL;
  args_info->dhcprelayagent_orig = NULL;
  args_info->lease_arg = 600;
  args_info->lease_orig = NULL;
  args_info->leaseplus_arg = 60;
  args_info->leaseplus_orig = NULL;
  args_info->noc2c_flag = 0;
  args_info->eapolenable_flag = 0;
  args_info->uamserver_arg = NULL;
  args_info->uamserver_orig = NULL;
  args_info->uamhomepage_arg = NULL;
  args_info->uamhomepage_orig = NULL;
  args_info->uamsecret_arg = NULL;
  args_info->uamsecret_orig = NULL;
  args_info->uamlisten_arg = NULL;
  args_info->uamlisten_orig = NULL;
  args_info->dhcplisten_arg = NULL;
  args_info->dhcplisten_orig = NULL;
  args_info->uamport_arg = 3990;
  args_info->uamport_orig = NULL;
  args_info->uamuiport_arg = 3991;
  args_info->uamuiport_orig = NULL;
  args_info->uamallowed_arg = NULL;
  args_info->uamallowed_orig = NULL;
  args_info->uamdomain_arg = NULL;
  args_info->uamdomain_orig = NULL;
  args_info->uamdomainttl_arg = 60;
  args_info->uamdomainttl_orig = NULL;
  args_info->uamregex_arg = NULL;
  args_info->uamregex_orig = NULL;
  args_info->nosystemdns_flag = 0;
  args_info->uamanydns_flag = 0;
  args_info->uamanyip_flag = 0;
  args_info->uamnatanyip_flag = 0;
  args_info->wisprlogin_arg = NULL;
  args_info->wisprlogin_orig = NULL;
  args_info->nouamsuccess_flag = 0;
  args_info->nowispr1_flag = 0;
  args_info->nowispr2_flag = 0;
  args_info->uamlogoutip_arg = gengetopt_strdup ("1.0.0.0");
  args_info->uamlogoutip_orig = NULL;
  args_info->uamaliasip_arg = gengetopt_strdup ("1.0.0.1");
  args_info->uamaliasip_orig = NULL;
  args_info->uamaliasname_arg = NULL;
  args_info->uamaliasname_orig = NULL;
  args_info->uamhostname_arg = NULL;
  args_info->uamhostname_orig = NULL;
  args_info->authedallowed_arg = NULL;
  args_info->authedallowed_orig = NULL;
  args_info->uamauthedallowed_flag = 0;
  args_info->uamaaaurl_arg = NULL;
  args_info->uamaaaurl_orig = NULL;
  args_info->domaindnslocal_flag = 0;
  args_info->radsec_flag = 0;
  args_info->defsessiontimeout_arg = 0;
  args_info->defsessiontimeout_orig = NULL;
  args_info->defidletimeout_arg = 0;
  args_info->defidletimeout_orig = NULL;
  args_info->defbandwidthmaxdown_arg = 0;
  args_info->defbandwidthmaxdown_orig = NULL;
  args_info->defbandwidthmaxup_arg = 0;
  args_info->defbandwidthmaxup_orig = NULL;
  args_info->definteriminterval_arg = 300;
  args_info->definteriminterval_orig = NULL;
  args_info->bwbucketupsize_arg = 0;
  args_info->bwbucketupsize_orig = NULL;
  args_info->bwbucketdnsize_arg = 0;
  args_info->bwbucketdnsize_orig = NULL;
  args_info->bwbucketminsize_arg = 0;
  args_info->bwbucketminsize_orig = NULL;
  args_info->macauth_flag = 0;
  args_info->macreauth_flag = 0;
  args_info->macauthdeny_flag = 0;
  args_info->macallowed_arg = NULL;
  args_info->macallowed_orig = NULL;
  args_info->macsuffix_arg = NULL;
  args_info->macsuffix_orig = NULL;
  args_info->macpasswd_arg = NULL;
  args_info->macpasswd_orig = NULL;
  args_info->macallowlocal_flag = 0;
  args_info->strictmacauth_flag = 0;
  args_info->strictdhcp_flag = 0;
  args_info->wwwdir_arg = NULL;
  args_info->wwwdir_orig = NULL;
  args_info->wwwbin_arg = NULL;
  args_info->wwwbin_orig = NULL;
  args_info->uamui_arg = NULL;
  args_info->uamui_orig = NULL;
  args_info->adminuser_arg = NULL;
  args_info->adminuser_orig = NULL;
  args_info->adminpasswd_arg = NULL;
  args_info->adminpasswd_orig = NULL;
  args_info->adminupdatefile_arg = NULL;
  args_info->adminupdatefile_orig = NULL;
  args_info->rtmonfile_arg = NULL;
  args_info->rtmonfile_orig = NULL;
  args_info->ethers_arg = NULL;
  args_info->ethers_orig = NULL;
  args_info->nasmac_arg = NULL;
  args_info->nasmac_orig = NULL;
  args_info->nasip_arg = NULL;
  args_info->nasip_orig = NULL;
  args_info->ssid_arg = NULL;
  args_info->ssid_orig = NULL;
  args_info->vlan_arg = NULL;
  args_info->vlan_orig = NULL;
  args_info->ieee8021q_flag = 0;
  args_info->only8021q_flag = 0;
  args_info->cmdsocket_arg = NULL;
  args_info->cmdsocket_orig = NULL;
  args_info->cmdsocketport_arg = 42424;
  args_info->cmdsocketport_orig = NULL;
  args_info->radiusoriginalurl_flag = 0;
  args_info->swapoctets_flag = 0;
  args_info->usestatusfile_arg = NULL;
  args_info->usestatusfile_orig = NULL;
  args_info->statusfilesave_flag = 0;
  args_info->localusers_arg = NULL;
  args_info->localusers_orig = NULL;
  args_info->postauthproxy_arg = NULL;
  args_info->postauthproxy_orig = NULL;
  args_info->postauthproxyport_arg = 0;
  args_info->postauthproxyport_orig = NULL;
  args_info->postauthproxyssl_flag = 0;
  args_info->wpaguests_flag = 0;
  args_info->openidauth_flag = 0;
  args_info->papalwaysok_flag = 0;
  args_info->mschapv2_flag = 0;
  args_info->chillixml_flag = 0;
  args_info->acctupdate_flag = 0;
  args_info->dnsparanoia_flag = 0;
  args_info->seskeepalive_flag = 0;
  args_info->wpadpacfile_arg = NULL;
  args_info->wpadpacfile_orig = NULL;
  args_info->usetap_flag = 0;
  args_info->noarpentries_flag = 0;
  args_info->routeif_arg = NULL;
  args_info->routeif_orig = NULL;
  args_info->framedservice_flag = 0;
  args_info->tcpwin_arg = 0;
  args_info->tcpwin_orig = NULL;
  args_info->scalewin_flag = 0;
  args_info->tcpmss_arg = 0;
  args_info->tcpmss_orig = NULL;
  args_info->maxclients_arg = 512;
  args_info->maxclients_orig = NULL;
  args_info->dhcphashsize_arg = 56;
  args_info->dhcphashsize_orig = NULL;
  args_info->radiusqsize_arg = 0;
  args_info->radiusqsize_orig = NULL;
  args_info->nochallenge_flag = 0;
  args_info->challengetimeout_arg = 600;
  args_info->challengetimeout_orig = NULL;
  args_info->challengetimeout2_arg = 1200;
  args_info->challengetimeout2_orig = NULL;
  args_info->redir_flag = 0;
  args_info->inject_arg = NULL;
  args_info->inject_orig = NULL;
  args_info->injectext_arg = NULL;
  args_info->injectext_orig = NULL;
  args_info->injectwispr_flag = 0;
  args_info->redirurl_flag = 0;
  args_info->routeonetone_flag = 0;
  args_info->nousergardendata_flag = 0;
  args_info->uamgardendata_flag = 0;
  args_info->uamotherdata_flag = 0;
  args_info->sslkeyfile_arg = NULL;
  args_info->sslkeyfile_orig = NULL;
  args_info->sslkeypass_arg = NULL;
  args_info->sslkeypass_orig = NULL;
  args_info->sslcertfile_arg = NULL;
  args_info->sslcertfile_orig = NULL;
  args_info->sslcafile_arg = NULL;
  args_info->sslcafile_orig = NULL;
  args_info->unixipc_arg = NULL;
  args_info->unixipc_orig = NULL;
  args_info->uamallowpost_flag = 0;
  args_info->natip_arg = NULL;
  args_info->natip_orig = NULL;
  args_info->natport_arg = 0;
  args_info->natport_orig = NULL;
  args_info->redirssl_flag = 0;
  args_info->uamuissl_flag = 0;
  args_info->dnslog_arg = NULL;
  args_info->dnslog_orig = NULL;
  args_info->ipwhitelist_arg = NULL;
  args_info->ipwhitelist_orig = NULL;
  args_info->uamdomainfile_arg = NULL;
  args_info->uamdomainfile_orig = NULL;
  args_info->layer3_flag = 0;
  args_info->ipsrcallowed_arg = NULL;
  args_info->ipsrcallowed_orig = NULL;
  args_info->patricia_flag = 0;
  args_info->redirdnsreq_flag = 0;
  args_info->kname_arg = NULL;
  args_info->kname_orig = NULL;
  args_info->moddir_arg = NULL;
  args_info->moddir_orig = NULL;
  args_info->module_arg = NULL;
  args_info->module_orig = NULL;
  args_info->dhcpopt_arg = NULL;
  args_info->dhcpopt_orig = NULL;
  args_info->extadmvsa_arg = NULL;
  args_info->extadmvsa_orig = NULL;
  args_info->dhcpnotidle_flag = 0;
  args_info->forcedns1_arg = NULL;
  args_info->forcedns1_orig = NULL;
  args_info->forcedns1port_arg = 0;
  args_info->forcedns1port_orig = NULL;
  args_info->forcedns2_arg = NULL;
  args_info->forcedns2_orig = NULL;
  args_info->forcedns2port_arg = 0;
  args_info->forcedns2port_orig = NULL;
  args_info->dnspersession_flag = 0;
  args_info->ipv6_flag = 0;
  args_info->ipv6mode_arg = NULL;
  args_info->ipv6mode_orig = NULL;
  args_info->ipv6only_flag = 0;
  
}

static
void init_args_info(struct gengetopt_args_info *args_info)
{


  args_info->help_help = gengetopt_args_info_help[0] ;
  args_info->version_help = gengetopt_args_info_help[1] ;
  args_info->fg_help = gengetopt_args_info_help[2] ;
  args_info->debug_help = gengetopt_args_info_help[3] ;
  args_info->bin_help = gengetopt_args_info_help[4] ;
  args_info->reload_help = gengetopt_args_info_help[5] ;
  args_info->forgiving_help = gengetopt_args_info_help[6] ;
  args_info->debugfacility_help = gengetopt_args_info_help[7] ;
  args_info->logfacility_help = gengetopt_args_info_help[8] ;
  args_info->loglevel_help = gengetopt_args_info_help[9] ;
  args_info->conf_help = gengetopt_args_info_help[10] ;
  args_info->interval_help = gengetopt_args_info_help[11] ;
  args_info->pidfile_help = gengetopt_args_info_help[12] ;
  args_info->statedir_help = gengetopt_args_info_help[13] ;
  args_info->uid_help = gengetopt_args_info_help[14] ;
  args_info->gid_help = gengetopt_args_info_help[15] ;
  args_info->net_help = gengetopt_args_info_help[16] ;
  args_info->dhcpstart_help = gengetopt_args_info_help[17] ;
  args_info->dhcpend_help = gengetopt_args_info_help[18] ;
  args_info->dhcpbroadcast_help = gengetopt_args_info_help[19] ;
  args_info->dynip_help = gengetopt_args_info_help[20] ;
  args_info->nodynip_help = gengetopt_args_info_help[21] ;
  args_info->statip_help = gengetopt_args_info_help[22] ;
  args_info->uamanyipex_help = gengetopt_args_info_help[23] ;
  args_info->uamnatanyipex_help = gengetopt_args_info_help[24] ;
  args_info->dns1_help = gengetopt_args_info_help[25] ;
  args_info->dns2_help = gengetopt_args_info_help[26] ;
  args_info->domain_help = gengetopt_args_info_help[27] ;
  args_info->ipup_help = gengetopt_args_info_help[28] ;
  args_info->ipdown_help = gengetopt_args_info_help[29] ;
  args_info->conup_help = gengetopt_args_info_help[30] ;
  args_info->condown_help = gengetopt_args_info_help[31] ;
  args_info->macup_help = gengetopt_args_info_help[32] ;
  args_info->macdown_help = gengetopt_args_info_help[33] ;
  args_info->vlanupdate_help = gengetopt_args_info_help[34] ;
  args_info->vlanlocation_help = gengetopt_args_info_help[35] ;
  args_info->locationupdate_help = gengetopt_args_info_help[36] ;
  args_info->locationstopstart_help = gengetopt_args_info_help[37] ;
  args_info->locationcopycalled_help = gengetopt_args_info_help[38] ;
  args_info->locationimmediateupdate_help = gengetopt_args_info_help[39] ;
  args_info->locationopt82_help = gengetopt_args_info_help[40] ;
  args_info->txqlen_help = gengetopt_args_info_help[41] ;
  args_info->tundev_help = gengetopt_args_info_help[42] ;
  args_info->mtu_help = gengetopt_args_info_help[43] ;
  args_info->autostatip_help = gengetopt_args_info_help[44] ;
  args_info->mmapring_help = gengetopt_args_info_help[45] ;
  args_info->ringsize_help = gengetopt_args_info_help[46] ;
  args_info->sndbuf_help = gengetopt_args_info_help[47] ;
  args_info->rcvbuf_help = gengetopt_args_info_help[48] ;
  args_info->childmax_help = gengetopt_args_info_help[49] ;
  args_info->peerid_help = gengetopt_args_info_help[50] ;
  args_info->peerkey_help = gengetopt_args_info_help[51] ;
  args_info->radiuslisten_help = gengetopt_args_info_help[52] ;
  args_info->radiusserver1_help = gengetopt_args_info_help[53] ;
  args_info->radiusserver2_help = gengetopt_args_info_help[54] ;
  args_info->radiusauthport_help = gengetopt_args_info_help[55] ;
  args_info->radiusacctport_help = gengetopt_args_info_help[56] ;
  args_info->radiussecret_help = gengetopt_args_info_help[57] ;
  args_info->radiustimeout_help = gengetopt_args_info_help[58] ;
  args_info->radiusretry_help = gengetopt_args_info_help[59] ;
  args_info->radiusretrysec_help = gengetopt_args_info_help[60] ;
  args_info->radiusnasid_help = gengetopt_args_info_help[61] ;
  args_info->radiuslocationid_help = gengetopt_args_info_help[62] ;
  args_info->radiuslocationname_help = gengetopt_args_info_help[63] ;
  args_info->locationname_help = gengetopt_args_info_help[64] ;
  args_info->radiusnasporttype_help = gengetopt_args_info_help[65] ;
  args_info->coaport_help = gengetopt_args_info_help[66] ;
  args_info->coanoipcheck_help = gengetopt_args_info_help[67] ;
  args_info->noradallow_help = gengetopt_args_info_help[68] ;
  args_info->proxylisten_help = gengetopt_args_info_help[69] ;
  args_info->proxyport_help = gengetopt_args_info_help[70] ;
  args_info->proxyclient_help = gengetopt_args_info_help[71] ;
  args_info->proxysecret_help = gengetopt_args_info_help[72] ;
  args_info->proxymacaccept_help = gengetopt_args_info_help[73] ;
  args_info->proxyonacct_help = gengetopt_args_info_help[74] ;
  args_info->proxylocattr_help = gengetopt_args_info_help[75] ;
  args_info->proxylocattr_min = 0;
  args_info->proxylocattr_max = 0;
  args_info->dhcpif_help = gengetopt_args_info_help[76] ;
  args_info->moreif_help = gengetopt_args_info_help[77] ;
  args_info->moreif_min = 0;
  args_info->moreif_max = 0;
  args_info->dhcpmac_help = gengetopt_args_info_help[78] ;
  args_info->dhcpmacset_help = gengetopt_args_info_help[79] ;
  args_info->nexthop_help = gengetopt_args_info_help[80] ;
  args_info->dhcpradius_help = gengetopt_args_info_help[81] ;
  args_info->dhcpgateway_help = gengetopt_args_info_help[82] ;
  args_info->dhcpgatewayport_help = gengetopt_args_info_help[83] ;
  args_info->dhcprelayagent_help = gengetopt_args_info_help[84] ;
  args_info->lease_help = gengetopt_args_info_help[85] ;
  args_info->leaseplus_help = gengetopt_args_info_help[86] ;
  args_info->noc2c_help = gengetopt_args_info_help[87] ;
  args_info->eapolenable_help = gengetopt_args_info_help[88] ;
  args_info->uamserver_help = gengetopt_args_info_help[89] ;
  args_info->uamhomepage_help = gengetopt_args_info_help[90] ;
  args_info->uamsecret_help = gengetopt_args_info_help[91] ;
  args_info->uamlisten_help = gengetopt_args_info_help[92] ;
  args_info->dhcplisten_help = gengetopt_args_info_help[93] ;
  args_info->uamport_help = gengetopt_args_info_help[94] ;
  args_info->uamuiport_help = gengetopt_args_info_help[95] ;
  args_info->uamallowed_help = gengetopt_args_info_help[96] ;
  args_info->uamallowed_min = 0;
  args_info->uamallowed_max = 0;
  args_info->uamdomain_help = gengetopt_args_info_help[97] ;
  args_info->uamdomain_min = 0;
  args_info->uamdomain_max = 0;
  args_info->uamdomainttl_help = gengetopt_args_info_help[98] ;
  args_info->uamregex_help = gengetopt_args_info_help[99] ;
  args_info->uamregex_min = 0;
  args_info->uamregex_max = 0;
  args_info->nosystemdns_help = gengetopt_args_info_help[100] ;
  args_info->uamanydns_help = gengetopt_args_info_help[101] ;
  args_info->uamanyip_help = gengetopt_args_info_help[102] ;
  args_info->uamnatanyip_help = gengetopt_args_info_help[103] ;
  args_info->wisprlogin_help = gengetopt_args_info_help[104] ;
  args_info->nouamsuccess_help = gengetopt_args_info_help[105] ;
  args_info->nowispr1_help = gengetopt_args_info_help[106] ;
  args_info->nowispr2_help = gengetopt_args_info_help[107] ;
  args_info->uamlogoutip_help = gengetopt_args_info_help[108] ;
  args_info->uamaliasip_help = gengetopt_args_info_help[109] ;
  args_info->uamaliasname_help = gengetopt_args_info_help[110] ;
  args_info->uamhostname_help = gengetopt_args_info_help[111] ;
  args_info->authedallowed_help = gengetopt_args_info_help[112] ;
  args_info->authedallowed_min = 0;
  args_info->authedallowed_max = 0;
  args_info->uamauthedallowed_help = gengetopt_args_info_help[113] ;
  args_info->uamaaaurl_help = gengetopt_args_info_help[114] ;
  args_info->domaindnslocal_help = gengetopt_args_info_help[115] ;
  args_info->radsec_help = gengetopt_args_info_help[116] ;
  args_info->defsessiontimeout_help = gengetopt_args_info_help[117] ;
  args_info->defidletimeout_help = gengetopt_args_info_help[118] ;
  args_info->defbandwidthmaxdown_help = gengetopt_args_info_help[119] ;
  args_info->defbandwidthmaxup_help = gengetopt_args_info_help[120] ;
  args_info->definteriminterval_help = gengetopt_args_info_help[121] ;
  args_info->bwbucketupsize_help = gengetopt_args_info_help[122] ;
  args_info->bwbucketdnsize_help = gengetopt_args_info_help[123] ;
  args_info->bwbucketminsize_help = gengetopt_args_info_help[124] ;
  args_info->macauth_help = gengetopt_args_info_help[125] ;
  args_info->macreauth_help = gengetopt_args_info_help[126] ;
  args_info->macauthdeny_help = gengetopt_args_info_help[127] ;
  args_info->macallowed_help = gengetopt_args_info_help[128] ;
  args_info->macallowed_min = 0;
  args_info->macallowed_max = 0;
  args_info->macsuffix_help = gengetopt_args_info_help[129] ;
  args_info->macpasswd_help = gengetopt_args_info_help[130] ;
  args_info->macallowlocal_help = gengetopt_args_info_help[131] ;
  args_info->strictmacauth_help = gengetopt_args_info_help[132] ;
  args_info->strictdhcp_help = gengetopt_args_info_help[133] ;
  args_info->wwwdir_help = gengetopt_args_info_help[134] ;
  args_info->wwwbin_help = gengetopt_args_info_help[135] ;
  args_info->uamui_help = gengetopt_args_info_help[136] ;
  args_info->adminuser_help = gengetopt_args_info_help[137] ;
  args_info->adminpasswd_help = gengetopt_args_info_help[138] ;
  args_info->adminupdatefile_help = gengetopt_args_info_help[139] ;
  args_info->rtmonfile_help = gengetopt_args_info_help[140] ;
  args_info->ethers_help = gengetopt_args_info_help[141] ;
  args_info->nasmac_help = gengetopt_args_info_help[142] ;
  args_info->nasip_help = gengetopt_args_info_help[143] ;
  args_info->ssid_help = gengetopt_args_info_help[144] ;
  args_info->vlan_help = gengetopt_args_info_help[145] ;
  args_info->ieee8021q_help = gengetopt_args_info_help[146] ;
  args_info->only8021q_help = gengetopt_args_info_help[147] ;
  args_info->cmdsocket_help = gengetopt_args_info_help[148] ;
  args_info->cmdsocketport_help = gengetopt_args_info_help[149] ;
  args_info->radiusoriginalurl_help = gengetopt_args_info_help[150] ;
  args_info->swapoctets_help = gengetopt_args_info_help[151] ;
  args_info->usestatusfile_help = gengetopt_args_info_help[152] ;
  args_info->statusfilesave_help = gengetopt_args_info_help[153] ;
  args_info->localusers_help = gengetopt_args_info_help[154] ;
  args_info->postauthproxy_help = gengetopt_args_info_help[155] ;
  args_info->postauthproxyport_help = gengetopt_args_info_help[156] ;
  args_info->postauthproxyssl_help = gengetopt_args_info_help[157] ;
  args_info->wpaguests_help = gengetopt_args_info_help[158] ;
  args_info->openidauth_help = gengetopt_args_info_help[159] ;
  args_info->papalwaysok_help = gengetopt_args_info_help[160] ;
  args_info->mschapv2_help = gengetopt_args_info_help[161] ;
  args_info->chillixml_help = gengetopt_args_info_help[162] ;
  args_info->acctupdate_help = gengetopt_args_info_help[163] ;
  args_info->dnsparanoia_help = gengetopt_args_info_help[164] ;
  args_info->seskeepalive_help = gengetopt_args_info_help[165] ;
  args_info->wpadpacfile_help = gengetopt_args_info_help[166] ;
  args_info->usetap_help = gengetopt_args_info_help[167] ;
  args_info->noarpentries_help = gengetopt_args_info_help[168] ;
  args_info->routeif_help = gengetopt_args_info_help[169] ;
  args_info->framedservice_help = gengetopt_args_info_help[170] ;
  args_info->tcpwin_help = gengetopt_args_info_help[171] ;
  args_info->scalewin_help = gengetopt_args_info_help[172] ;
  args_info->tcpmss_help = gengetopt_args_info_help[173] ;
  args_info->maxclients_help = gengetopt_args_info_help[174] ;
  args_info->dhcphashsize_help = gengetopt_args_info_help[175] ;
  args_info->radiusqsize_help = gengetopt_args_info_help[176] ;
  args_info->nochallenge_help = gengetopt_args_info_help[177] ;
  args_info->challengetimeout_help = gengetopt_args_info_help[178] ;
  args_info->challengetimeout2_help = gengetopt_args_info_help[179] ;
  args_info->redir_help = gengetopt_args_info_help[180] ;
  args_info->inject_help = gengetopt_args_info_help[181] ;
  args_info->injectext_help = gengetopt_args_info_help[182] ;
  args_info->injectwispr_help = gengetopt_args_info_help[183] ;
  args_info->redirurl_help = gengetopt_args_info_help[184] ;
  args_info->routeonetone_help = gengetopt_args_info_help[185] ;
  args_info->nousergardendata_help = gengetopt_args_info_help[186] ;
  args_info->uamgardendata_help = gengetopt_args_info_help[187] ;
  args_info->uamotherdata_help = gengetopt_args_info_help[188] ;
  args_info->sslkeyfile_help = gengetopt_args_info_help[189] ;
  args_info->sslkeypass_help = gengetopt_args_info_help[190] ;
  args_info->sslcertfile_help = gengetopt_args_info_help[191] ;
  args_info->sslcafile_help = gengetopt_args_info_help[192] ;
  args_info->unixipc_help = gengetopt_args_info_help[193] ;
  args_info->uamallowpost_help = gengetopt_args_info_help[194] ;
  args_info->natip_help = gengetopt_args_info_help[195] ;
  args_info->natport_help = gengetopt_args_info_help[196] ;
  args_info->redirssl_help = gengetopt_args_info_help[197] ;
  args_info->uamuissl_help = gengetopt_args_info_help[198] ;
  args_info->dnslog_help = gengetopt_args_info_help[199] ;
  args_info->ipwhitelist_help = gengetopt_args_info_help[200] ;
  args_info->uamdomainfile_help = gengetopt_args_info_help[201] ;
  args_info->layer3_help = gengetopt_args_info_help[202] ;
  args_info->ipsrcallowed_help = gengetopt_args_info_help[203] ;
  args_info->ipsrcallowed_min = 0;
  args_info->ipsrcallowed_max = 0;
  args_info->patricia_help = gengetopt_args_info_help[204] ;
  args_info->redirdnsreq_help = gengetopt_args_info_help[205] ;
  args_info->kname_help = gengetopt_args_info_help[206] ;
  args_info->moddir_help = gengetopt_args_info_help[207] ;
  args_info->module_help = gengetopt_args_info_help[208] ;
  args_info->module_min = 0;
  args_info->module_max = 0;
  args_info->dhcpopt_help = gengetopt_args_info_help[209] ;
  args_info->dhcpopt_min = 0;
  args_info->dhcpopt_max = 0;
  args_info->extadmvsa_help = gengetopt_args_info_help[210] ;
  args_info->extadmvsa_min = 0;
  args_info->extadmvsa_max = 0;
  args_info->dhcpnotidle_help = gengetopt_args_info_help[211] ;
  args_info->forcedns1_help = gengetopt_args_info_help[212] ;
  args_info->forcedns1port_help = gengetopt_args_info_help[213] ;
  args_info->forcedns2_help = gengetopt_args_info_help[214] ;
  args_info->forcedns2port_help = gengetopt_args_info_help[215] ;
  args_info->dnspersession_help = gengetopt_args_info_help[216] ;
  args_info->ipv6_help = gengetopt_args_info_help[217] ;
  args_info->ipv6mode_help = gengetopt_args_info_help[218] ;
  args_info->ipv6only_help = gengetopt_args_info_help[219] ;
  
}

void
cmdline_parser_print_version (void)
{
  printf ("%s %s\n",
     (strlen(CMDLINE_PARSER_PACKAGE_NAME) ? CMDLINE_PARSER_PACKAGE_NAME : CMDLINE_PARSER_PACKAGE),
     CMDLINE_PARSER_VERSION);

  if (strlen(gengetopt_args_info_versiontext) > 0)
    printf("\n%s\n", gengetopt_args_info_versiontext);
}

static void print_help_common(void) {
  cmdline_parser_print_version ();

  if (strlen(gengetopt_args_info_purpose) > 0)
    printf("\n%s\n", gengetopt_args_info_purpose);

  if (strlen(gengetopt_args_info_usage) > 0)
    printf("\n%s\n", gengetopt_args_info_usage);

  printf("\n");

  if (strlen(gengetopt_args_info_description) > 0)
    printf("%s\n\n", gengetopt_args_info_description);
}

void
cmdline_parser_print_help (void)
{
  int i = 0;
  print_help_common();
  while (gengetopt_args_info_help[i])
    printf("%s\n", gengetopt_args_info_help[i++]);
}

void
cmdline_parser_init (struct gengetopt_args_info *args_info)
{
  clear_given (args_info);
  clear_args (args_info);
  init_args_info (args_info);
}

void
cmdline_parser_params_init(struct cmdline_parser_params *params)
{
  if (params)
    { 
      params->override = 0;
      params->initialize = 1;
      params->check_required = 1;
      params->check_ambiguity = 0;
      params->print_errors = 1;
    }
}

struct cmdline_parser_params *
cmdline_parser_params_create(void)
{
  struct cmdline_parser_params *params = 
    (struct cmdline_parser_params *)malloc(sizeof(struct cmdline_parser_params));
  cmdline_parser_params_init(params);  
  return params;
}

static void
free_string_field (char **s)
{
  if (*s)
    {
      free (*s);
      *s = 0;
    }
}

/** @brief generic value variable */
union generic_value {
    int int_arg;
    long long_arg;
    char *string_arg;
    const char *default_string_arg;
};

/** @brief holds temporary values for multiple options */
struct generic_list
{
  union generic_value arg;
  char *orig;
  struct generic_list *next;
};

/**
 * @brief add a node at the head of the list 
 */
static void add_node(struct generic_list **list) {
  struct generic_list *new_node = (struct generic_list *) malloc (sizeof (struct generic_list));
  new_node->next = *list;
  *list = new_node;
  new_node->arg.string_arg = 0;
  new_node->orig = 0;
}


static void
free_multiple_string_field(unsigned int len, char ***arg, char ***orig)
{
  unsigned int i;
  if (*arg) {
    for (i = 0; i < len; ++i)
      {
        free_string_field(&((*arg)[i]));
        free_string_field(&((*orig)[i]));
      }
    free_string_field(&((*arg)[0])); /* free default string */

    free (*arg);
    *arg = 0;
    free (*orig);
    *orig = 0;
  }
}

static void
cmdline_parser_release (struct gengetopt_args_info *args_info)
{

  free_string_field (&(args_info->bin_arg));
  free_string_field (&(args_info->bin_orig));
  free_string_field (&(args_info->debugfacility_orig));
  free_string_field (&(args_info->logfacility_orig));
  free_string_field (&(args_info->loglevel_orig));
  free_string_field (&(args_info->conf_arg));
  free_string_field (&(args_info->conf_orig));
  free_string_field (&(args_info->interval_orig));
  free_string_field (&(args_info->pidfile_arg));
  free_string_field (&(args_info->pidfile_orig));
  free_string_field (&(args_info->statedir_arg));
  free_string_field (&(args_info->statedir_orig));
  free_string_field (&(args_info->uid_orig));
  free_string_field (&(args_info->gid_orig));
  free_string_field (&(args_info->net_arg));
  free_string_field (&(args_info->net_orig));
  free_string_field (&(args_info->dhcpstart_orig));
  free_string_field (&(args_info->dhcpend_orig));
  free_string_field (&(args_info->dynip_arg));
  free_string_field (&(args_info->dynip_orig));
  free_string_field (&(args_info->statip_arg));
  free_string_field (&(args_info->statip_orig));
  free_string_field (&(args_info->uamanyipex_arg));
  free_string_field (&(args_info->uamanyipex_orig));
  free_string_field (&(args_info->uamnatanyipex_arg));
  free_string_field (&(args_info->uamnatanyipex_orig));
  free_string_field (&(args_info->dns1_arg));
  free_string_field (&(args_info->dns1_orig));
  free_string_field (&(args_info->dns2_arg));
  free_string_field (&(args_info->dns2_orig));
  free_string_field (&(args_info->domain_arg));
  free_string_field (&(args_info->domain_orig));
  free_string_field (&(args_info->ipup_arg));
  free_string_field (&(args_info->ipup_orig));
  free_string_field (&(args_info->ipdown_arg));
  free_string_field (&(args_info->ipdown_orig));
  free_string_field (&(args_info->conup_arg));
  free_string_field (&(args_info->conup_orig));
  free_string_field (&(args_info->condown_arg));
  free_string_field (&(args_info->condown_orig));
  free_string_field (&(args_info->macup_arg));
  free_string_field (&(args_info->macup_orig));
  free_string_field (&(args_info->macdown_arg));
  free_string_field (&(args_info->macdown_orig));
  free_string_field (&(args_info->vlanupdate_arg));
  free_string_field (&(args_info->vlanupdate_orig));
  free_string_field (&(args_info->locationupdate_arg));
  free_string_field (&(args_info->locationupdate_orig));
  free_string_field (&(args_info->txqlen_orig));
  free_string_field (&(args_info->tundev_arg));
  free_string_field (&(args_info->tundev_orig));
  free_string_field (&(args_info->mtu_orig));
  free_string_field (&(args_info->autostatip_orig));
  free_string_field (&(args_info->ringsize_orig));
  free_string_field (&(args_info->sndbuf_orig));
  free_string_field (&(args_info->rcvbuf_orig));
  free_string_field (&(args_info->childmax_orig));
  free_string_field (&(args_info->peerid_orig));
  free_string_field (&(args_info->peerkey_arg));
  free_string_field (&(args_info->peerkey_orig));
  free_string_field (&(args_info->radiuslisten_arg));
  free_string_field (&(args_info->radiuslisten_orig));
  free_string_field (&(args_info->radiusserver1_arg));
  free_string_field (&(args_info->radiusserver1_orig));
  free_string_field (&(args_info->radiusserver2_arg));
  free_string_field (&(args_info->radiusserver2_orig));
  free_string_field (&(args_info->radiusauthport_orig));
  free_string_field (&(args_info->radiusacctport_orig));
  free_string_field (&(args_info->radiussecret_arg));
  free_string_field (&(args_info->radiussecret_orig));
  free_string_field (&(args_info->radiustimeout_orig));
  free_string_field (&(args_info->radiusretry_orig));
  free_string_field (&(args_info->radiusretrysec_orig));
  free_string_field (&(args_info->radiusnasid_arg));
  free_string_field (&(args_info->radiusnasid_orig));
  free_string_field (&(args_info->radiuslocationid_arg));
  free_string_field (&(args_info->radiuslocationid_orig));
  free_string_field (&(args_info->radiuslocationname_arg));
  free_string_field (&(args_info->radiuslocationname_orig));
  free_string_field (&(args_info->locationname_arg));
  free_string_field (&(args_info->locationname_orig));
  free_string_field (&(args_info->radiusnasporttype_orig));
  free_string_field (&(args_info->coaport_orig));
  free_string_field (&(args_info->proxylisten_arg));
  free_string_field (&(args_info->proxylisten_orig));
  free_string_field (&(args_info->proxyport_orig));
  free_string_field (&(args_info->proxyclient_arg));
  free_string_field (&(args_info->proxyclient_orig));
  free_string_field (&(args_info->proxysecret_arg));
  free_string_field (&(args_info->proxysecret_orig));
  free_multiple_string_field (args_info->proxylocattr_given, &(args_info->proxylocattr_arg), &(args_info->proxylocattr_orig));
  free_string_field (&(args_info->dhcpif_arg));
  free_string_field (&(args_info->dhcpif_orig));
  free_multiple_string_field (args_info->moreif_given, &(args_info->moreif_arg), &(args_info->moreif_orig));
  free_string_field (&(args_info->dhcpmac_arg));
  free_string_field (&(args_info->dhcpmac_orig));
  free_string_field (&(args_info->nexthop_arg));
  free_string_field (&(args_info->nexthop_orig));
  free_string_field (&(args_info->dhcpgateway_arg));
  free_string_field (&(args_info->dhcpgateway_orig));
  free_string_field (&(args_info->dhcpgatewayport_orig));
  free_string_field (&(args_info->dhcprelayagent_arg));
  free_string_field (&(args_info->dhcprelayagent_orig));
  free_string_field (&(args_info->lease_orig));
  free_string_field (&(args_info->leaseplus_orig));
  free_string_field (&(args_info->uamserver_arg));
  free_string_field (&(args_info->uamserver_orig));
  free_string_field (&(args_info->uamhomepage_arg));
  free_string_field (&(args_info->uamhomepage_orig));
  free_string_field (&(args_info->uamsecret_arg));
  free_string_field (&(args_info->uamsecret_orig));
  free_string_field (&(args_info->uamlisten_arg));
  free_string_field (&(args_info->uamlisten_orig));
  free_string_field (&(args_info->dhcplisten_arg));
  free_string_field (&(args_info->dhcplisten_orig));
  free_string_field (&(args_info->uamport_orig));
  free_string_field (&(args_info->uamuiport_orig));
  free_multiple_string_field (args_info->uamallowed_given, &(args_info->uamallowed_arg), &(args_info->uamallowed_orig));
  free_multiple_string_field (args_info->uamdomain_given, &(args_info->uamdomain_arg), &(args_info->uamdomain_orig));
  free_string_field (&(args_info->uamdomainttl_orig));
  free_multiple_string_field (args_info->uamregex_given, &(args_info->uamregex_arg), &(args_info->uamregex_orig));
  free_string_field (&(args_info->wisprlogin_arg));
  free_string_field (&(args_info->wisprlogin_orig));
  free_string_field (&(args_info->uamlogoutip_arg));
  free_string_field (&(args_info->uamlogoutip_orig));
  free_string_field (&(args_info->uamaliasip_arg));
  free_string_field (&(args_info->uamaliasip_orig));
  free_string_field (&(args_info->uamaliasname_arg));
  free_string_field (&(args_info->uamaliasname_orig));
  free_string_field (&(args_info->uamhostname_arg));
  free_string_field (&(args_info->uamhostname_orig));
  free_multiple_string_field (args_info->authedallowed_given, &(args_info->authedallowed_arg), &(args_info->authedallowed_orig));
  free_string_field (&(args_info->uamaaaurl_arg));
  free_string_field (&(args_info->uamaaaurl_orig));
  free_string_field (&(args_info->defsessiontimeout_orig));
  free_string_field (&(args_info->defidletimeout_orig));
  free_string_field (&(args_info->defbandwidthmaxdown_orig));
  free_string_field (&(args_info->defbandwidthmaxup_orig));
  free_string_field (&(args_info->definteriminterval_orig));
  free_string_field (&(args_info->bwbucketupsize_orig));
  free_string_field (&(args_info->bwbucketdnsize_orig));
  free_string_field (&(args_info->bwbucketminsize_orig));
  free_multiple_string_field (args_info->macallowed_given, &(args_info->macallowed_arg), &(args_info->macallowed_orig));
  free_string_field (&(args_info->macsuffix_arg));
  free_string_field (&(args_info->macsuffix_orig));
  free_string_field (&(args_info->macpasswd_arg));
  free_string_field (&(args_info->macpasswd_orig));
  free_string_field (&(args_info->wwwdir_arg));
  free_string_field (&(args_info->wwwdir_orig));
  free_string_field (&(args_info->wwwbin_arg));
  free_string_field (&(args_info->wwwbin_orig));
  free_string_field (&(args_info->uamui_arg));
  free_string_field (&(args_info->uamui_orig));
  free_string_field (&(args_info->adminuser_arg));
  free_string_field (&(args_info->adminuser_orig));
  free_string_field (&(args_info->adminpasswd_arg));
  free_string_field (&(args_info->adminpasswd_orig));
  free_string_field (&(args_info->adminupdatefile_arg));
  free_string_field (&(args_info->adminupdatefile_orig));
  free_string_field (&(args_info->rtmonfile_arg));
  free_string_field (&(args_info->rtmonfile_orig));
  free_string_field (&(args_info->ethers_arg));
  free_string_field (&(args_info->ethers_orig));
  free_string_field (&(args_info->nasmac_arg));
  free_string_field (&(args_info->nasmac_orig));
  free_string_field (&(args_info->nasip_arg));
  free_string_field (&(args_info->nasip_orig));
  free_string_field (&(args_info->ssid_arg));
  free_string_field (&(args_info->ssid_orig));
  free_string_field (&(args_info->vlan_arg));
  free_string_field (&(args_info->vlan_orig));
  free_string_field (&(args_info->cmdsocket_arg));
  free_string_field (&(args_info->cmdsocket_orig));
  free_string_field (&(args_info->cmdsocketport_orig));
  free_string_field (&(args_info->usestatusfile_arg));
  free_string_field (&(args_info->usestatusfile_orig));
  free_string_field (&(args_info->localusers_arg));
  free_string_field (&(args_info->localusers_orig));
  free_string_field (&(args_info->postauthproxy_arg));
  free_string_field (&(args_info->postauthproxy_orig));
  free_string_field (&(args_info->postauthproxyport_orig));
  free_string_field (&(args_info->wpadpacfile_arg));
  free_string_field (&(args_info->wpadpacfile_orig));
  free_string_field (&(args_info->routeif_arg));
  free_string_field (&(args_info->routeif_orig));
  free_string_field (&(args_info->tcpwin_orig));
  free_string_field (&(args_info->tcpmss_orig));
  free_string_field (&(args_info->maxclients_orig));
  free_string_field (&(args_info->dhcphashsize_orig));
  free_string_field (&(args_info->radiusqsize_orig));
  free_string_field (&(args_info->challengetimeout_orig));
  free_string_field (&(args_info->challengetimeout2_orig));
  free_string_field (&(args_info->inject_arg));
  free_string_field (&(args_info->inject_orig));
  free_string_field (&(args_info->injectext_arg));
  free_string_field (&(args_info->injectext_orig));
  free_string_field (&(args_info->sslkeyfile_arg));
  free_string_field (&(args_info->sslkeyfile_orig));
  free_string_field (&(args_info->sslkeypass_arg));
  free_string_field (&(args_info->sslkeypass_orig));
  free_string_field (&(args_info->sslcertfile_arg));
  free_string_field (&(args_info->sslcertfile_orig));
  free_string_field (&(args_info->sslcafile_arg));
  free_string_field (&(args_info->sslcafile_orig));
  free_string_field (&(args_info->unixipc_arg));
  free_string_field (&(args_info->unixipc_orig));
  free_string_field (&(args_info->natip_arg));
  free_string_field (&(args_info->natip_orig));
  free_string_field (&(args_info->natport_orig));
  free_string_field (&(args_info->dnslog_arg));
  free_string_field (&(args_info->dnslog_orig));
  free_string_field (&(args_info->ipwhitelist_arg));
  free_string_field (&(args_info->ipwhitelist_orig));
  free_string_field (&(args_info->uamdomainfile_arg));
  free_string_field (&(args_info->uamdomainfile_orig));
  free_multiple_string_field (args_info->ipsrcallowed_given, &(args_info->ipsrcallowed_arg), &(args_info->ipsrcallowed_orig));
  free_string_field (&(args_info->kname_arg));
  free_string_field (&(args_info->kname_orig));
  free_string_field (&(args_info->moddir_arg));
  free_string_field (&(args_info->moddir_orig));
  free_multiple_string_field (args_info->module_given, &(args_info->module_arg), &(args_info->module_orig));
  free_multiple_string_field (args_info->dhcpopt_given, &(args_info->dhcpopt_arg), &(args_info->dhcpopt_orig));
  free_multiple_string_field (args_info->extadmvsa_given, &(args_info->extadmvsa_arg), &(args_info->extadmvsa_orig));
  free_string_field (&(args_info->forcedns1_arg));
  free_string_field (&(args_info->forcedns1_orig));
  free_string_field (&(args_info->forcedns1port_orig));
  free_string_field (&(args_info->forcedns2_arg));
  free_string_field (&(args_info->forcedns2_orig));
  free_string_field (&(args_info->forcedns2port_orig));
  free_string_field (&(args_info->ipv6mode_arg));
  free_string_field (&(args_info->ipv6mode_orig));
  
  

  clear_given (args_info);
}


static void
write_into_file(FILE *outfile, const char *opt, const char *arg, const char *values[])
{
  FIX_UNUSED (values);
  if (arg) {
    fprintf(outfile, "%s=\"%s\"\n", opt, arg);
  } else {
    fprintf(outfile, "%s\n", opt);
  }
}

static void
write_multiple_into_file(FILE *outfile, int len, const char *opt, char **arg, const char *values[])
{
  int i;
  
  for (i = 0; i < len; ++i)
    write_into_file(outfile, opt, (arg ? arg[i] : 0), values);
}

int
cmdline_parser_dump(FILE *outfile, struct gengetopt_args_info *args_info)
{
  int i = 0;

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot dump options to stream\n", CMDLINE_PARSER_PACKAGE);
      return EXIT_FAILURE;
    }

  if (args_info->help_given)
    write_into_file(outfile, "help", 0, 0 );
  if (args_info->version_given)
    write_into_file(outfile, "version", 0, 0 );
  if (args_info->fg_given)
    write_into_file(outfile, "fg", 0, 0 );
  if (args_info->debug_given)
    write_into_file(outfile, "debug", 0, 0 );
  if (args_info->bin_given)
    write_into_file(outfile, "bin", args_info->bin_orig, 0);
  if (args_info->reload_given)
    write_into_file(outfile, "reload", 0, 0 );
  if (args_info->forgiving_given)
    write_into_file(outfile, "forgiving", 0, 0 );
  if (args_info->debugfacility_given)
    write_into_file(outfile, "debugfacility", args_info->debugfacility_orig, 0);
  if (args_info->logfacility_given)
    write_into_file(outfile, "logfacility", args_info->logfacility_orig, 0);
  if (args_info->loglevel_given)
    write_into_file(outfile, "loglevel", args_info->loglevel_orig, 0);
  if (args_info->conf_given)
    write_into_file(outfile, "conf", args_info->conf_orig, 0);
  if (args_info->interval_given)
    write_into_file(outfile, "interval", args_info->interval_orig, 0);
  if (args_info->pidfile_given)
    write_into_file(outfile, "pidfile", args_info->pidfile_orig, 0);
  if (args_info->statedir_given)
    write_into_file(outfile, "statedir", args_info->statedir_orig, 0);
  if (args_info->uid_given)
    write_into_file(outfile, "uid", args_info->uid_orig, 0);
  if (args_info->gid_given)
    write_into_file(outfile, "gid", args_info->gid_orig, 0);
  if (args_info->net_given)
    write_into_file(outfile, "net", args_info->net_orig, 0);
  if (args_info->dhcpstart_given)
    write_into_file(outfile, "dhcpstart", args_info->dhcpstart_orig, 0);
  if (args_info->dhcpend_given)
    write_into_file(outfile, "dhcpend", args_info->dhcpend_orig, 0);
  if (args_info->dhcpbroadcast_given)
    write_into_file(outfile, "dhcpbroadcast", 0, 0 );
  if (args_info->dynip_given)
    write_into_file(outfile, "dynip", args_info->dynip_orig, 0);
  if (args_info->nodynip_given)
    write_into_file(outfile, "nodynip", 0, 0 );
  if (args_info->statip_given)
    write_into_file(outfile, "statip", args_info->statip_orig, 0);
  if (args_info->uamanyipex_given)
    write_into_file(outfile, "uamanyipex", args_info->uamanyipex_orig, 0);
  if (args_info->uamnatanyipex_given)
    write_into_file(outfile, "uamnatanyipex", args_info->uamnatanyipex_orig, 0);
  if (args_info->dns1_given)
    write_into_file(outfile, "dns1", args_info->dns1_orig, 0);
  if (args_info->dns2_given)
    write_into_file(outfile, "dns2", args_info->dns2_orig, 0);
  if (args_info->domain_given)
    write_into_file(outfile, "domain", args_info->domain_orig, 0);
  if (args_info->ipup_given)
    write_into_file(outfile, "ipup", args_info->ipup_orig, 0);
  if (args_info->ipdown_given)
    write_into_file(outfile, "ipdown", args_info->ipdown_orig, 0);
  if (args_info->conup_given)
    write_into_file(outfile, "conup", args_info->conup_orig, 0);
  if (args_info->condown_given)
    write_into_file(outfile, "condown", args_info->condown_orig, 0);
  if (args_info->macup_given)
    write_into_file(outfile, "macup", args_info->macup_orig, 0);
  if (args_info->macdown_given)
    write_into_file(outfile, "macdown", args_info->macdown_orig, 0);
  if (args_info->vlanupdate_given)
    write_into_file(outfile, "vlanupdate", args_info->vlanupdate_orig, 0);
  if (args_info->vlanlocation_given)
    write_into_file(outfile, "vlanlocation", 0, 0 );
  if (args_info->locationupdate_given)
    write_into_file(outfile, "locationupdate", args_info->locationupdate_orig, 0);
  if (args_info->locationstopstart_given)
    write_into_file(outfile, "locationstopstart", 0, 0 );
  if (args_info->locationcopycalled_given)
    write_into_file(outfile, "locationcopycalled", 0, 0 );
  if (args_info->locationimmediateupdate_given)
    write_into_file(outfile, "locationimmediateupdate", 0, 0 );
  if (args_info->locationopt82_given)
    write_into_file(outfile, "locationopt82", 0, 0 );
  if (args_info->txqlen_given)
    write_into_file(outfile, "txqlen", args_info->txqlen_orig, 0);
  if (args_info->tundev_given)
    write_into_file(outfile, "tundev", args_info->tundev_orig, 0);
  if (args_info->mtu_given)
    write_into_file(outfile, "mtu", args_info->mtu_orig, 0);
  if (args_info->autostatip_given)
    write_into_file(outfile, "autostatip", args_info->autostatip_orig, 0);
  if (args_info->mmapring_given)
    write_into_file(outfile, "mmapring", 0, 0 );
  if (args_info->ringsize_given)
    write_into_file(outfile, "ringsize", args_info->ringsize_orig, 0);
  if (args_info->sndbuf_given)
    write_into_file(outfile, "sndbuf", args_info->sndbuf_orig, 0);
  if (args_info->rcvbuf_given)
    write_into_file(outfile, "rcvbuf", args_info->rcvbuf_orig, 0);
  if (args_info->childmax_given)
    write_into_file(outfile, "childmax", args_info->childmax_orig, 0);
  if (args_info->peerid_given)
    write_into_file(outfile, "peerid", args_info->peerid_orig, 0);
  if (args_info->peerkey_given)
    write_into_file(outfile, "peerkey", args_info->peerkey_orig, 0);
  if (args_info->radiuslisten_given)
    write_into_file(outfile, "radiuslisten", args_info->radiuslisten_orig, 0);
  if (args_info->radiusserver1_given)
    write_into_file(outfile, "radiusserver1", args_info->radiusserver1_orig, 0);
  if (args_info->radiusserver2_given)
    write_into_file(outfile, "radiusserver2", args_info->radiusserver2_orig, 0);
  if (args_info->radiusauthport_given)
    write_into_file(outfile, "radiusauthport", args_info->radiusauthport_orig, 0);
  if (args_info->radiusacctport_given)
    write_into_file(outfile, "radiusacctport", args_info->radiusacctport_orig, 0);
  if (args_info->radiussecret_given)
    write_into_file(outfile, "radiussecret", args_info->radiussecret_orig, 0);
  if (args_info->radiustimeout_given)
    write_into_file(outfile, "radiustimeout", args_info->radiustimeout_orig, 0);
  if (args_info->radiusretry_given)
    write_into_file(outfile, "radiusretry", args_info->radiusretry_orig, 0);
  if (args_info->radiusretrysec_given)
    write_into_file(outfile, "radiusretrysec", args_info->radiusretrysec_orig, 0);
  if (args_info->radiusnasid_given)
    write_into_file(outfile, "radiusnasid", args_info->radiusnasid_orig, 0);
  if (args_info->radiuslocationid_given)
    write_into_file(outfile, "radiuslocationid", args_info->radiuslocationid_orig, 0);
  if (args_info->radiuslocationname_given)
    write_into_file(outfile, "radiuslocationname", args_info->radiuslocationname_orig, 0);
  if (args_info->locationname_given)
    write_into_file(outfile, "locationname", args_info->locationname_orig, 0);
  if (args_info->radiusnasporttype_given)
    write_into_file(outfile, "radiusnasporttype", args_info->radiusnasporttype_orig, 0);
  if (args_info->coaport_given)
    write_into_file(outfile, "coaport", args_info->coaport_orig, 0);
  if (args_info->coanoipcheck_given)
    write_into_file(outfile, "coanoipcheck", 0, 0 );
  if (args_info->noradallow_given)
    write_into_file(outfile, "noradallow", 0, 0 );
  if (args_info->proxylisten_given)
    write_into_file(outfile, "proxylisten", args_info->proxylisten_orig, 0);
  if (args_info->proxyport_given)
    write_into_file(outfile, "proxyport", args_info->proxyport_orig, 0);
  if (args_info->proxyclient_given)
    write_into_file(outfile, "proxyclient", args_info->proxyclient_orig, 0);
  if (args_info->proxysecret_given)
    write_into_file(outfile, "proxysecret", args_info->proxysecret_orig, 0);
  if (args_info->proxymacaccept_given)
    write_into_file(outfile, "proxymacaccept", 0, 0 );
  if (args_info->proxyonacct_given)
    write_into_file(outfile, "proxyonacct", 0, 0 );
  write_multiple_into_file(outfile, args_info->proxylocattr_given, "proxylocattr", args_info->proxylocattr_orig, 0);
  if (args_info->dhcpif_given)
    write_into_file(outfile, "dhcpif", args_info->dhcpif_orig, 0);
  write_multiple_into_file(outfile, args_info->moreif_given, "moreif", args_info->moreif_orig, 0);
  if (args_info->dhcpmac_given)
    write_into_file(outfile, "dhcpmac", args_info->dhcpmac_orig, 0);
  if (args_info->dhcpmacset_given)
    write_into_file(outfile, "dhcpmacset", 0, 0 );
  if (args_info->nexthop_given)
    write_into_file(outfile, "nexthop", args_info->nexthop_orig, 0);
  if (args_info->dhcpradius_given)
    write_into_file(outfile, "dhcpradius", 0, 0 );
  if (args_info->dhcpgateway_given)
    write_into_file(outfile, "dhcpgateway", args_info->dhcpgateway_orig, 0);
  if (args_info->dhcpgatewayport_given)
    write_into_file(outfile, "dhcpgatewayport", args_info->dhcpgatewayport_orig, 0);
  if (args_info->dhcprelayagent_given)
    write_into_file(outfile, "dhcprelayagent", args_info->dhcprelayagent_orig, 0);
  if (args_info->lease_given)
    write_into_file(outfile, "lease", args_info->lease_orig, 0);
  if (args_info->leaseplus_given)
    write_into_file(outfile, "leaseplus", args_info->leaseplus_orig, 0);
  if (args_info->noc2c_given)
    write_into_file(outfile, "noc2c", 0, 0 );
  if (args_info->eapolenable_given)
    write_into_file(outfile, "eapolenable", 0, 0 );
  if (args_info->uamserver_given)
    write_into_file(outfile, "uamserver", args_info->uamserver_orig, 0);
  if (args_info->uamhomepage_given)
    write_into_file(outfile, "uamhomepage", args_info->uamhomepage_orig, 0);
  if (args_info->uamsecret_given)
    write_into_file(outfile, "uamsecret", args_info->uamsecret_orig, 0);
  if (args_info->uamlisten_given)
    write_into_file(outfile, "uamlisten", args_info->uamlisten_orig, 0);
  if (args_info->dhcplisten_given)
    write_into_file(outfile, "dhcplisten", args_info->dhcplisten_orig, 0);
  if (args_info->uamport_given)
    write_into_file(outfile, "uamport", args_info->uamport_orig, 0);
  if (args_info->uamuiport_given)
    write_into_file(outfile, "uamuiport", args_info->uamuiport_orig, 0);
  write_multiple_into_file(outfile, args_info->uamallowed_given, "uamallowed", args_info->uamallowed_orig, 0);
  write_multiple_into_file(outfile, args_info->uamdomain_given, "uamdomain", args_info->uamdomain_orig, 0);
  if (args_info->uamdomainttl_given)
    write_into_file(outfile, "uamdomainttl", args_info->uamdomainttl_orig, 0);
  write_multiple_into_file(outfile, args_info->uamregex_given, "uamregex", args_info->uamregex_orig, 0);
  if (args_info->nosystemdns_given)
    write_into_file(outfile, "nosystemdns", 0, 0 );
  if (args_info->uamanydns_given)
    write_into_file(outfile, "uamanydns", 0, 0 );
  if (args_info->uamanyip_given)
    write_into_file(outfile, "uamanyip", 0, 0 );
  if (args_info->uamnatanyip_given)
    write_into_file(outfile, "uamnatanyip", 0, 0 );
  if (args_info->wisprlogin_given)
    write_into_file(outfile, "wisprlogin", args_info->wisprlogin_orig, 0);
  if (args_info->nouamsuccess_given)
    write_into_file(outfile, "nouamsuccess", 0, 0 );
  if (args_info->nowispr1_given)
    write_into_file(outfile, "nowispr1", 0, 0 );
  if (args_info->nowispr2_given)
    write_into_file(outfile, "nowispr2", 0, 0 );
  if (args_info->uamlogoutip_given)
    write_into_file(outfile, "uamlogoutip", args_info->uamlogoutip_orig, 0);
  if (args_info->uamaliasip_given)
    write_into_file(outfile, "uamaliasip", args_info->uamaliasip_orig, 0);
  if (args_info->uamaliasname_given)
    write_into_file(outfile, "uamaliasname", args_info->uamaliasname_orig, 0);
  if (args_info->uamhostname_given)
    write_into_file(outfile, "uamhostname", args_info->uamhostname_orig, 0);
  write_multiple_into_file(outfile, args_info->authedallowed_given, "authedallowed", args_info->authedallowed_orig, 0);
  if (args_info->uamauthedallowed_given)
    write_into_file(outfile, "uamauthedallowed", 0, 0 );
  if (args_info->uamaaaurl_given)
    write_into_file(outfile, "uamaaaurl", args_info->uamaaaurl_orig, 0);
  if (args_info->domaindnslocal_given)
    write_into_file(outfile, "domaindnslocal", 0, 0 );
  if (args_info->radsec_given)
    write_into_file(outfile, "radsec", 0, 0 );
  if (args_info->defsessiontimeout_given)
    write_into_file(outfile, "defsessiontimeout", args_info->defsessiontimeout_orig, 0);
  if (args_info->defidletimeout_given)
    write_into_file(outfile, "defidletimeout", args_info->defidletimeout_orig, 0);
  if (args_info->defbandwidthmaxdown_given)
    write_into_file(outfile, "defbandwidthmaxdown", args_info->defbandwidthmaxdown_orig, 0);
  if (args_info->defbandwidthmaxup_given)
    write_into_file(outfile, "defbandwidthmaxup", args_info->defbandwidthmaxup_orig, 0);
  if (args_info->definteriminterval_given)
    write_into_file(outfile, "definteriminterval", args_info->definteriminterval_orig, 0);
  if (args_info->bwbucketupsize_given)
    write_into_file(outfile, "bwbucketupsize", args_info->bwbucketupsize_orig, 0);
  if (args_info->bwbucketdnsize_given)
    write_into_file(outfile, "bwbucketdnsize", args_info->bwbucketdnsize_orig, 0);
  if (args_info->bwbucketminsize_given)
    write_into_file(outfile, "bwbucketminsize", args_info->bwbucketminsize_orig, 0);
  if (args_info->macauth_given)
    write_into_file(outfile, "macauth", 0, 0 );
  if (args_info->macreauth_given)
    write_into_file(outfile, "macreauth", 0, 0 );
  if (args_info->macauthdeny_given)
    write_into_file(outfile, "macauthdeny", 0, 0 );
  write_multiple_into_file(outfile, args_info->macallowed_given, "macallowed", args_info->macallowed_orig, 0);
  if (args_info->macsuffix_given)
    write_into_file(outfile, "macsuffix", args_info->macsuffix_orig, 0);
  if (args_info->macpasswd_given)
    write_into_file(outfile, "macpasswd", args_info->macpasswd_orig, 0);
  if (args_info->macallowlocal_given)
    write_into_file(outfile, "macallowlocal", 0, 0 );
  if (args_info->strictmacauth_given)
    write_into_file(outfile, "strictmacauth", 0, 0 );
  if (args_info->strictdhcp_given)
    write_into_file(outfile, "strictdhcp", 0, 0 );
  if (args_info->wwwdir_given)
    write_into_file(outfile, "wwwdir", args_info->wwwdir_orig, 0);
  if (args_info->wwwbin_given)
    write_into_file(outfile, "wwwbin", args_info->wwwbin_orig, 0);
  if (args_info->uamui_given)
    write_into_file(outfile, "uamui", args_info->uamui_orig, 0);
  if (args_info->adminuser_given)
    write_into_file(outfile, "adminuser", args_info->adminuser_orig, 0);
  if (args_info->adminpasswd_given)
    write_into_file(outfile, "adminpasswd", args_info->adminpasswd_orig, 0);
  if (args_info->adminupdatefile_given)
    write_into_file(outfile, "adminupdatefile", args_info->adminupdatefile_orig, 0);
  if (args_info->rtmonfile_given)
    write_into_file(outfile, "rtmonfile", args_info->rtmonfile_orig, 0);
  if (args_info->ethers_given)
    write_into_file(outfile, "ethers", args_info->ethers_orig, 0);
  if (args_info->nasmac_given)
    write_into_file(outfile, "nasmac", args_info->nasmac_orig, 0);
  if (args_info->nasip_given)
    write_into_file(outfile, "nasip", args_info->nasip_orig, 0);
  if (args_info->ssid_given)
    write_into_file(outfile, "ssid", args_info->ssid_orig, 0);
  if (args_info->vlan_given)
    write_into_file(outfile, "vlan", args_info->vlan_orig, 0);
  if (args_info->ieee8021q_given)
    write_into_file(outfile, "ieee8021q", 0, 0 );
  if (args_info->only8021q_given)
    write_into_file(outfile, "only8021q", 0, 0 );
  if (args_info->cmdsocket_given)
    write_into_file(outfile, "cmdsocket", args_info->cmdsocket_orig, 0);
  if (args_info->cmdsocketport_given)
    write_into_file(outfile, "cmdsocketport", args_info->cmdsocketport_orig, 0);
  if (args_info->radiusoriginalurl_given)
    write_into_file(outfile, "radiusoriginalurl", 0, 0 );
  if (args_info->swapoctets_given)
    write_into_file(outfile, "swapoctets", 0, 0 );
  if (args_info->usestatusfile_given)
    write_into_file(outfile, "usestatusfile", args_info->usestatusfile_orig, 0);
  if (args_info->statusfilesave_given)
    write_into_file(outfile, "statusfilesave", 0, 0 );
  if (args_info->localusers_given)
    write_into_file(outfile, "localusers", args_info->localusers_orig, 0);
  if (args_info->postauthproxy_given)
    write_into_file(outfile, "postauthproxy", args_info->postauthproxy_orig, 0);
  if (args_info->postauthproxyport_given)
    write_into_file(outfile, "postauthproxyport", args_info->postauthproxyport_orig, 0);
  if (args_info->postauthproxyssl_given)
    write_into_file(outfile, "postauthproxyssl", 0, 0 );
  if (args_info->wpaguests_given)
    write_into_file(outfile, "wpaguests", 0, 0 );
  if (args_info->openidauth_given)
    write_into_file(outfile, "openidauth", 0, 0 );
  if (args_info->papalwaysok_given)
    write_into_file(outfile, "papalwaysok", 0, 0 );
  if (args_info->mschapv2_given)
    write_into_file(outfile, "mschapv2", 0, 0 );
  if (args_info->chillixml_given)
    write_into_file(outfile, "chillixml", 0, 0 );
  if (args_info->acctupdate_given)
    write_into_file(outfile, "acctupdate", 0, 0 );
  if (args_info->dnsparanoia_given)
    write_into_file(outfile, "dnsparanoia", 0, 0 );
  if (args_info->seskeepalive_given)
    write_into_file(outfile, "seskeepalive", 0, 0 );
  if (args_info->wpadpacfile_given)
    write_into_file(outfile, "wpadpacfile", args_info->wpadpacfile_orig, 0);
  if (args_info->usetap_given)
    write_into_file(outfile, "usetap", 0, 0 );
  if (args_info->noarpentries_given)
    write_into_file(outfile, "noarpentries", 0, 0 );
  if (args_info->routeif_given)
    write_into_file(outfile, "routeif", args_info->routeif_orig, 0);
  if (args_info->framedservice_given)
    write_into_file(outfile, "framedservice", 0, 0 );
  if (args_info->tcpwin_given)
    write_into_file(outfile, "tcpwin", args_info->tcpwin_orig, 0);
  if (args_info->scalewin_given)
    write_into_file(outfile, "scalewin", 0, 0 );
  if (args_info->tcpmss_given)
    write_into_file(outfile, "tcpmss", args_info->tcpmss_orig, 0);
  if (args_info->maxclients_given)
    write_into_file(outfile, "maxclients", args_info->maxclients_orig, 0);
  if (args_info->dhcphashsize_given)
    write_into_file(outfile, "dhcphashsize", args_info->dhcphashsize_orig, 0);
  if (args_info->radiusqsize_given)
    write_into_file(outfile, "radiusqsize", args_info->radiusqsize_orig, 0);
  if (args_info->nochallenge_given)
    write_into_file(outfile, "nochallenge", 0, 0 );
  if (args_info->challengetimeout_given)
    write_into_file(outfile, "challengetimeout", args_info->challengetimeout_orig, 0);
  if (args_info->challengetimeout2_given)
    write_into_file(outfile, "challengetimeout2", args_info->challengetimeout2_orig, 0);
  if (args_info->redir_given)
    write_into_file(outfile, "redir", 0, 0 );
  if (args_info->inject_given)
    write_into_file(outfile, "inject", args_info->inject_orig, 0);
  if (args_info->injectext_given)
    write_into_file(outfile, "injectext", args_info->injectext_orig, 0);
  if (args_info->injectwispr_given)
    write_into_file(outfile, "injectwispr", 0, 0 );
  if (args_info->redirurl_given)
    write_into_file(outfile, "redirurl", 0, 0 );
  if (args_info->routeonetone_given)
    write_into_file(outfile, "routeonetone", 0, 0 );
  if (args_info->nousergardendata_given)
    write_into_file(outfile, "nousergardendata", 0, 0 );
  if (args_info->uamgardendata_given)
    write_into_file(outfile, "uamgardendata", 0, 0 );
  if (args_info->uamotherdata_given)
    write_into_file(outfile, "uamotherdata", 0, 0 );
  if (args_info->sslkeyfile_given)
    write_into_file(outfile, "sslkeyfile", args_info->sslkeyfile_orig, 0);
  if (args_info->sslkeypass_given)
    write_into_file(outfile, "sslkeypass", args_info->sslkeypass_orig, 0);
  if (args_info->sslcertfile_given)
    write_into_file(outfile, "sslcertfile", args_info->sslcertfile_orig, 0);
  if (args_info->sslcafile_given)
    write_into_file(outfile, "sslcafile", args_info->sslcafile_orig, 0);
  if (args_info->unixipc_given)
    write_into_file(outfile, "unixipc", args_info->unixipc_orig, 0);
  if (args_info->uamallowpost_given)
    write_into_file(outfile, "uamallowpost", 0, 0 );
  if (args_info->natip_given)
    write_into_file(outfile, "natip", args_info->natip_orig, 0);
  if (args_info->natport_given)
    write_into_file(outfile, "natport", args_info->natport_orig, 0);
  if (args_info->redirssl_given)
    write_into_file(outfile, "redirssl", 0, 0 );
  if (args_info->uamuissl_given)
    write_into_file(outfile, "uamuissl", 0, 0 );
  if (args_info->dnslog_given)
    write_into_file(outfile, "dnslog", args_info->dnslog_orig, 0);
  if (args_info->ipwhitelist_given)
    write_into_file(outfile, "ipwhitelist", args_info->ipwhitelist_orig, 0);
  if (args_info->uamdomainfile_given)
    write_into_file(outfile, "uamdomainfile", args_info->uamdomainfile_orig, 0);
  if (args_info->layer3_given)
    write_into_file(outfile, "layer3", 0, 0 );
  write_multiple_into_file(outfile, args_info->ipsrcallowed_given, "ipsrcallowed", args_info->ipsrcallowed_orig, 0);
  if (args_info->patricia_given)
    write_into_file(outfile, "patricia", 0, 0 );
  if (args_info->redirdnsreq_given)
    write_into_file(outfile, "redirdnsreq", 0, 0 );
  if (args_info->kname_given)
    write_into_file(outfile, "kname", args_info->kname_orig, 0);
  if (args_info->moddir_given)
    write_into_file(outfile, "moddir", args_info->moddir_orig, 0);
  write_multiple_into_file(outfile, args_info->module_given, "module", args_info->module_orig, 0);
  write_multiple_into_file(outfile, args_info->dhcpopt_given, "dhcpopt", args_info->dhcpopt_orig, 0);
  write_multiple_into_file(outfile, args_info->extadmvsa_given, "extadmvsa", args_info->extadmvsa_orig, 0);
  if (args_info->dhcpnotidle_given)
    write_into_file(outfile, "dhcpnotidle", 0, 0 );
  if (args_info->forcedns1_given)
    write_into_file(outfile, "forcedns1", args_info->forcedns1_orig, 0);
  if (args_info->forcedns1port_given)
    write_into_file(outfile, "forcedns1port", args_info->forcedns1port_orig, 0);
  if (args_info->forcedns2_given)
    write_into_file(outfile, "forcedns2", args_info->forcedns2_orig, 0);
  if (args_info->forcedns2port_given)
    write_into_file(outfile, "forcedns2port", args_info->forcedns2port_orig, 0);
  if (args_info->dnspersession_given)
    write_into_file(outfile, "dnspersession", 0, 0 );
  if (args_info->ipv6_given)
    write_into_file(outfile, "ipv6", 0, 0 );
  if (args_info->ipv6mode_given)
    write_into_file(outfile, "ipv6mode", args_info->ipv6mode_orig, 0);
  if (args_info->ipv6only_given)
    write_into_file(outfile, "ipv6only", 0, 0 );
  

  i = EXIT_SUCCESS;
  return i;
}

int
cmdline_parser_file_save(const char *filename, struct gengetopt_args_info *args_info)
{
  FILE *outfile;
  int i = 0;

  outfile = fopen(filename, "w");

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot open file for writing: %s\n", CMDLINE_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  i = cmdline_parser_dump(outfile, args_info);
  fclose (outfile);

  return i;
}

void
cmdline_parser_free (struct gengetopt_args_info *args_info)
{
  cmdline_parser_release (args_info);
}

/** @brief replacement of strdup, which is not standard */
char *
gengetopt_strdup (const char *s)
{
  char *result = 0;
  if (!s)
    return result;

  result = (char*)malloc(strlen(s) + 1);
  if (result == (char*)0)
    return (char*)0;
  strcpy(result, s);
  return result;
}

static char *
get_multiple_arg_token(const char *arg)
{
  const char *tok;
  char *ret;
  size_t len, num_of_escape, i, j;

  if (!arg)
    return 0;

  tok = strchr (arg, ',');
  num_of_escape = 0;

  /* make sure it is not escaped */
  while (tok)
    {
      if (*(tok-1) == '\\')
        {
          /* find the next one */
          tok = strchr (tok+1, ',');
          ++num_of_escape;
        }
      else
        break;
    }

  if (tok)
    len = (size_t)(tok - arg + 1);
  else
    len = strlen (arg) + 1;

  len -= num_of_escape;

  ret = (char *) malloc (len);

  i = 0;
  j = 0;
  while (arg[i] && (j < len-1))
    {
      if (arg[i] == '\\' && 
	  arg[ i + 1 ] && 
	  arg[ i + 1 ] == ',')
        ++i;

      ret[j++] = arg[i++];
    }

  ret[len-1] = '\0';

  return ret;
}

static const char *
get_multiple_arg_token_next(const char *arg)
{
  const char *tok;

  if (!arg)
    return 0;

  tok = strchr (arg, ',');

  /* make sure it is not escaped */
  while (tok)
    {
      if (*(tok-1) == '\\')
        {
          /* find the next one */
          tok = strchr (tok+1, ',');
        }
      else
        break;
    }

  if (! tok || strlen(tok) == 1)
    return 0;

  return tok+1;
}

static int
check_multiple_option_occurrences(const char *prog_name, unsigned int option_given, unsigned int min, unsigned int max, const char *option_desc);

int
check_multiple_option_occurrences(const char *prog_name, unsigned int option_given, unsigned int min, unsigned int max, const char *option_desc)
{
  int error_occurred = 0;

  if (option_given && (min > 0 || max > 0))
    {
      if (min > 0 && max > 0)
        {
          if (min == max)
            {
              /* specific occurrences */
              if (option_given != (unsigned int) min)
                {
                  fprintf (stderr, "%s: %s option occurrences must be %d\n",
                    prog_name, option_desc, min);
                  error_occurred = 1;
                }
            }
          else if (option_given < (unsigned int) min
                || option_given > (unsigned int) max)
            {
              /* range occurrences */
              fprintf (stderr, "%s: %s option occurrences must be between %d and %d\n",
                prog_name, option_desc, min, max);
              error_occurred = 1;
            }
        }
      else if (min > 0)
        {
          /* at least check */
          if (option_given < min)
            {
              fprintf (stderr, "%s: %s option occurrences must be at least %d\n",
                prog_name, option_desc, min);
              error_occurred = 1;
            }
        }
      else if (max > 0)
        {
          /* at most check */
          if (option_given > max)
            {
              fprintf (stderr, "%s: %s option occurrences must be at most %d\n",
                prog_name, option_desc, max);
              error_occurred = 1;
            }
        }
    }
    
  return error_occurred;
}
int
cmdline_parser (int argc, char **argv, struct gengetopt_args_info *args_info)
{
  return cmdline_parser2 (argc, argv, args_info, 0, 1, 1);
}

int
cmdline_parser_ext (int argc, char **argv, struct gengetopt_args_info *args_info,
                   struct cmdline_parser_params *params)
{
  int result;
  result = cmdline_parser_internal (argc, argv, args_info, params, 0);

  if (result == EXIT_FAILURE)
    {
      cmdline_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
cmdline_parser2 (int argc, char **argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required)
{
  int result;
  struct cmdline_parser_params params;
  
  params.override = override;
  params.initialize = initialize;
  params.check_required = check_required;
  params.check_ambiguity = 0;
  params.print_errors = 1;

  result = cmdline_parser_internal (argc, argv, args_info, &params, 0);

  if (result == EXIT_FAILURE)
    {
      cmdline_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
cmdline_parser_required (struct gengetopt_args_info *args_info, const char *prog_name)
{
  int result = EXIT_SUCCESS;

  if (cmdline_parser_required2(args_info, prog_name, 0) > 0)
    result = EXIT_FAILURE;

  if (result == EXIT_FAILURE)
    {
      cmdline_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
cmdline_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error)
{
  int error_occurred = 0;
  FIX_UNUSED (additional_error);

  /* checks for required options */
  if (check_multiple_option_occurrences(prog_name, args_info->proxylocattr_given, args_info->proxylocattr_min, args_info->proxylocattr_max, "'--proxylocattr'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->moreif_given, args_info->moreif_min, args_info->moreif_max, "'--moreif'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->uamallowed_given, args_info->uamallowed_min, args_info->uamallowed_max, "'--uamallowed'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->uamdomain_given, args_info->uamdomain_min, args_info->uamdomain_max, "'--uamdomain'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->uamregex_given, args_info->uamregex_min, args_info->uamregex_max, "'--uamregex'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->authedallowed_given, args_info->authedallowed_min, args_info->authedallowed_max, "'--authedallowed'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->macallowed_given, args_info->macallowed_min, args_info->macallowed_max, "'--macallowed'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->ipsrcallowed_given, args_info->ipsrcallowed_min, args_info->ipsrcallowed_max, "'--ipsrcallowed'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->module_given, args_info->module_min, args_info->module_max, "'--module'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->dhcpopt_given, args_info->dhcpopt_min, args_info->dhcpopt_max, "'--dhcpopt'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->extadmvsa_given, args_info->extadmvsa_min, args_info->extadmvsa_max, "'--extadmvsa'"))
     error_occurred = 1;
  
  
  /* checks for dependences among options */

  return error_occurred;
}


static char *package_name = 0;

/**
 * @brief updates an option
 * @param field the generic pointer to the field to update
 * @param orig_field the pointer to the orig field
 * @param field_given the pointer to the number of occurrence of this option
 * @param prev_given the pointer to the number of occurrence already seen
 * @param value the argument for this option (if null no arg was specified)
 * @param possible_values the possible values for this option (if specified)
 * @param default_value the default value (in case the option only accepts fixed values)
 * @param arg_type the type of this option
 * @param check_ambiguity @see cmdline_parser_params.check_ambiguity
 * @param override @see cmdline_parser_params.override
 * @param no_free whether to free a possible previous value
 * @param multiple_option whether this is a multiple option
 * @param long_opt the corresponding long option
 * @param short_opt the corresponding short option (or '-' if none)
 * @param additional_error possible further error specification
 */
static
int update_arg(void *field, char **orig_field,
               unsigned int *field_given, unsigned int *prev_given, 
               char *value, const char *possible_values[],
               const char *default_value,
               cmdline_parser_arg_type arg_type,
               int check_ambiguity, int override,
               int no_free, int multiple_option,
               const char *long_opt, char short_opt,
               const char *additional_error)
{
  char *stop_char = 0;
  const char *val = value;
  int found;
  char **string_field;
  FIX_UNUSED (field);

  stop_char = 0;
  found = 0;

  if (!multiple_option && prev_given && (*prev_given || (check_ambiguity && *field_given)))
    {
      if (short_opt != '-')
        fprintf (stderr, "%s: `--%s' (`-%c') option given more than once%s\n", 
               package_name, long_opt, short_opt,
               (additional_error ? additional_error : ""));
      else
        fprintf (stderr, "%s: `--%s' option given more than once%s\n", 
               package_name, long_opt,
               (additional_error ? additional_error : ""));
      return 1; /* failure */
    }

  FIX_UNUSED (default_value);
    
  if (field_given && *field_given && ! override)
    return 0;
  if (prev_given)
    (*prev_given)++;
  if (field_given)
    (*field_given)++;
  if (possible_values)
    val = possible_values[found];

  switch(arg_type) {
  case ARG_FLAG:
    *((int *)field) = !*((int *)field);
    break;
  case ARG_INT:
    if (val) *((int *)field) = strtol (val, &stop_char, 0);
    break;
  case ARG_LONG:
    if (val) *((long *)field) = (long)strtol (val, &stop_char, 0);
    break;
  case ARG_STRING:
    if (val) {
      string_field = (char **)field;
      if (!no_free && *string_field)
        free (*string_field); /* free previous string */
      *string_field = gengetopt_strdup (val);
    }
    break;
  default:
    break;
  };

  /* check numeric conversion */
  switch(arg_type) {
  case ARG_INT:
  case ARG_LONG:
    if (val && !(stop_char && *stop_char == '\0')) {
      fprintf(stderr, "%s: invalid numeric value: %s\n", package_name, val);
      return 1; /* failure */
    }
    break;
  default:
    ;
  };

  /* store the original value */
  switch(arg_type) {
  case ARG_NO:
  case ARG_FLAG:
    break;
  default:
    if (value && orig_field) {
      if (no_free) {
        *orig_field = value;
      } else {
        if (*orig_field)
          free (*orig_field); /* free previous string */
        *orig_field = gengetopt_strdup (value);
      }
    }
  };

  return 0; /* OK */
}

/**
 * @brief store information about a multiple option in a temporary list
 * @param list where to (temporarily) store multiple options
 */
static
int update_multiple_arg_temp(struct generic_list **list,
               unsigned int *prev_given, const char *val,
               const char *possible_values[], const char *default_value,
               cmdline_parser_arg_type arg_type,
               const char *long_opt, char short_opt,
               const char *additional_error)
{
  /* store single arguments */
  char *multi_token;
  const char *multi_next;

  if (arg_type == ARG_NO) {
    (*prev_given)++;
    return 0; /* OK */
  }

  multi_token = get_multiple_arg_token(val);
  multi_next = get_multiple_arg_token_next (val);

  while (1)
    {
      add_node (list);
      if (update_arg((void *)&((*list)->arg), &((*list)->orig), 0,
          prev_given, multi_token, possible_values, default_value, 
          arg_type, 0, 1, 1, 1, long_opt, short_opt, additional_error)) {
        if (multi_token) free(multi_token);
        return 1; /* failure */
      }

      if (multi_next)
        {
          multi_token = get_multiple_arg_token(multi_next);
          multi_next = get_multiple_arg_token_next (multi_next);
        }
      else
        break;
    }

  return 0; /* OK */
}

/**
 * @brief free the passed list (including possible string argument)
 */
static
void free_list(struct generic_list *list, short string_arg)
{
  if (list) {
    struct generic_list *tmp;
    while (list)
      {
        tmp = list;
        if (string_arg && list->arg.string_arg)
          free (list->arg.string_arg);
        if (list->orig)
          free (list->orig);
        list = list->next;
        free (tmp);
      }
  }
}

/**
 * @brief updates a multiple option starting from the passed list
 */
static
void update_multiple_arg(void *field, char ***orig_field,
               unsigned int field_given, unsigned int prev_given, union generic_value *default_value,
               cmdline_parser_arg_type arg_type,
               struct generic_list *list)
{
  int i;
  struct generic_list *tmp;

  if (prev_given && list) {
    *orig_field = (char **) realloc (*orig_field, (field_given + prev_given) * sizeof (char *));

    switch(arg_type) {
    case ARG_INT:
      *((int **)field) = (int *)realloc (*((int **)field), (field_given + prev_given) * sizeof (int)); break;
    case ARG_LONG:
      *((long **)field) = (long *)realloc (*((long **)field), (field_given + prev_given) * sizeof (long)); break;
    case ARG_STRING:
      *((char ***)field) = (char **)realloc (*((char ***)field), (field_given + prev_given) * sizeof (char *)); break;
    default:
      break;
    };
    
    for (i = (prev_given - 1); i >= 0; --i)
      {
        tmp = list;
        
        switch(arg_type) {
        case ARG_INT:
          (*((int **)field))[i + field_given] = tmp->arg.int_arg; break;
        case ARG_LONG:
          (*((long **)field))[i + field_given] = tmp->arg.long_arg; break;
        case ARG_STRING:
          (*((char ***)field))[i + field_given] = tmp->arg.string_arg; break;
        default:
          break;
        }        
        (*orig_field) [i + field_given] = list->orig;
        list = list->next;
        free (tmp);
      }
  } else { /* set the default value */
    if (default_value && ! field_given) {
      switch(arg_type) {
      case ARG_INT:
        if (! *((int **)field)) {
          *((int **)field) = (int *)malloc (sizeof (int));
          (*((int **)field))[0] = default_value->int_arg; 
        }
        break;
      case ARG_LONG:
        if (! *((long **)field)) {
          *((long **)field) = (long *)malloc (sizeof (long));
          (*((long **)field))[0] = default_value->long_arg;
        }
        break;
      case ARG_STRING:
        if (! *((char ***)field)) {
          *((char ***)field) = (char **)malloc (sizeof (char *));
          (*((char ***)field))[0] = gengetopt_strdup(default_value->string_arg);
        }
        break;
      default: break;
      }
      if (!(*orig_field)) {
        *orig_field = (char **) malloc (sizeof (char *));
        (*orig_field)[0] = 0;
      }
    }
  }
}

int
cmdline_parser_internal (
  int argc, char **argv, struct gengetopt_args_info *args_info,
                        struct cmdline_parser_params *params, const char *additional_error)
{
  int c;	/* Character of the parsed option.  */

  struct generic_list * proxylocattr_list = NULL;
  struct generic_list * moreif_list = NULL;
  struct generic_list * uamallowed_list = NULL;
  struct generic_list * uamdomain_list = NULL;
  struct generic_list * uamregex_list = NULL;
  struct generic_list * authedallowed_list = NULL;
  struct generic_list * macallowed_list = NULL;
  struct generic_list * ipsrcallowed_list = NULL;
  struct generic_list * module_list = NULL;
  struct generic_list * dhcpopt_list = NULL;
  struct generic_list * extadmvsa_list = NULL;
  int error_occurred = 0;
  struct gengetopt_args_info local_args_info;
  
  int override;
  int initialize;
  int check_required;
  int check_ambiguity;
  
  package_name = argv[0];
  
  override = params->override;
  initialize = params->initialize;
  check_required = params->check_required;
  check_ambiguity = params->check_ambiguity;

  if (initialize)
    cmdline_parser_init (args_info);

  cmdline_parser_init (&local_args_info);

  optarg = 0;
  optind = 0;
  opterr = params->print_errors;
  optopt = '?';

  while (1)
    {
      int option_index = 0;

      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "version",	0, NULL, 'V' },
        { "fg",	0, NULL, 'f' },
        { "debug",	0, NULL, 'd' },
        { "bin",	1, NULL, 'b' },
        { "reload",	0, NULL, 'r' },
        { "forgiving",	0, NULL, 'F' },
        { "debugfacility",	1, NULL, 0 },
        { "logfacility",	1, NULL, 0 },
        { "loglevel",	1, NULL, 0 },
        { "conf",	1, NULL, 'c' },
        { "interval",	1, NULL, 0 },
        { "pidfile",	1, NULL, 0 },
        { "statedir",	1, NULL, 0 },
        { "uid",	1, NULL, 0 },
        { "gid",	1, NULL, 0 },
        { "net",	1, NULL, 'n' },
        { "dhcpstart",	1, NULL, 0 },
        { "dhcpend",	1, NULL, 0 },
        { "dhcpbroadcast",	0, NULL, 0 },
        { "dynip",	1, NULL, 0 },
        { "nodynip",	0, NULL, 0 },
        { "statip",	1, NULL, 0 },
        { "uamanyipex",	1, NULL, 0 },
        { "uamnatanyipex",	1, NULL, 0 },
        { "dns1",	1, NULL, 0 },
        { "dns2",	1, NULL, 0 },
        { "domain",	1, NULL, 0 },
        { "ipup",	1, NULL, 0 },
        { "ipdown",	1, NULL, 0 },
        { "conup",	1, NULL, 0 },
        { "condown",	1, NULL, 0 },
        { "macup",	1, NULL, 0 },
        { "macdown",	1, NULL, 0 },
        { "vlanupdate",	1, NULL, 0 },
        { "vlanlocation",	0, NULL, 0 },
        { "locationupdate",	1, NULL, 0 },
        { "locationstopstart",	0, NULL, 0 },
        { "locationcopycalled",	0, NULL, 0 },
        { "locationimmediateupdate",	0, NULL, 0 },
        { "locationopt82",	0, NULL, 0 },
        { "txqlen",	1, NULL, 0 },
        { "tundev",	1, NULL, 0 },
        { "mtu",	1, NULL, 0 },
        { "autostatip",	1, NULL, 0 },
        { "mmapring",	0, NULL, 0 },
        { "ringsize",	1, NULL, 0 },
        { "sndbuf",	1, NULL, 0 },
        { "rcvbuf",	1, NULL, 0 },
        { "childmax",	1, NULL, 0 },
        { "peerid",	1, NULL, 0 },
        { "peerkey",	1, NULL, 0 },
        { "radiuslisten",	1, NULL, 0 },
        { "radiusserver1",	1, NULL, 0 },
        { "radiusserver2",	1, NULL, 0 },
        { "radiusauthport",	1, NULL, 0 },
        { "radiusacctport",	1, NULL, 0 },
        { "radiussecret",	1, NULL, 0 },
        { "radiustimeout",	1, NULL, 0 },
        { "radiusretry",	1, NULL, 0 },
        { "radiusretrysec",	1, NULL, 0 },
        { "radiusnasid",	1, NULL, 0 },
        { "radiuslocationid",	1, NULL, 0 },
        { "radiuslocationname",	1, NULL, 0 },
        { "locationname",	1, NULL, 0 },
        { "radiusnasporttype",	1, NULL, 0 },
        { "coaport",	1, NULL, 0 },
        { "coanoipcheck",	0, NULL, 0 },
        { "noradallow",	0, NULL, 0 },
        { "proxylisten",	1, NULL, 0 },
        { "proxyport",	1, NULL, 0 },
        { "proxyclient",	1, NULL, 0 },
        { "proxysecret",	1, NULL, 0 },
        { "proxymacaccept",	0, NULL, 0 },
        { "proxyonacct",	0, NULL, 0 },
        { "proxylocattr",	1, NULL, 0 },
        { "dhcpif",	1, NULL, 0 },
        { "moreif",	1, NULL, 0 },
        { "dhcpmac",	1, NULL, 0 },
        { "dhcpmacset",	0, NULL, 0 },
        { "nexthop",	1, NULL, 0 },
        { "dhcpradius",	0, NULL, 0 },
        { "dhcpgateway",	1, NULL, 0 },
        { "dhcpgatewayport",	1, NULL, 0 },
        { "dhcprelayagent",	1, NULL, 0 },
        { "lease",	1, NULL, 0 },
        { "leaseplus",	1, NULL, 0 },
        { "noc2c",	0, NULL, 0 },
        { "eapolenable",	0, NULL, 0 },
        { "uamserver",	1, NULL, 0 },
        { "uamhomepage",	1, NULL, 0 },
        { "uamsecret",	1, NULL, 0 },
        { "uamlisten",	1, NULL, 0 },
        { "dhcplisten",	1, NULL, 0 },
        { "uamport",	1, NULL, 0 },
        { "uamuiport",	1, NULL, 0 },
        { "uamallowed",	1, NULL, 0 },
        { "uamdomain",	1, NULL, 0 },
        { "uamdomainttl",	1, NULL, 0 },
        { "uamregex",	1, NULL, 0 },
        { "nosystemdns",	0, NULL, 0 },
        { "uamanydns",	0, NULL, 0 },
        { "uamanyip",	0, NULL, 0 },
        { "uamnatanyip",	0, NULL, 0 },
        { "wisprlogin",	1, NULL, 0 },
        { "nouamsuccess",	0, NULL, 0 },
        { "nowispr1",	0, NULL, 0 },
        { "nowispr2",	0, NULL, 0 },
        { "uamlogoutip",	1, NULL, 0 },
        { "uamaliasip",	1, NULL, 0 },
        { "uamaliasname",	1, NULL, 0 },
        { "uamhostname",	1, NULL, 0 },
        { "authedallowed",	1, NULL, 0 },
        { "uamauthedallowed",	0, NULL, 0 },
        { "uamaaaurl",	1, NULL, 0 },
        { "domaindnslocal",	0, NULL, 0 },
        { "radsec",	0, NULL, 0 },
        { "defsessiontimeout",	1, NULL, 0 },
        { "defidletimeout",	1, NULL, 0 },
        { "defbandwidthmaxdown",	1, NULL, 0 },
        { "defbandwidthmaxup",	1, NULL, 0 },
        { "definteriminterval",	1, NULL, 0 },
        { "bwbucketupsize",	1, NULL, 0 },
        { "bwbucketdnsize",	1, NULL, 0 },
        { "bwbucketminsize",	1, NULL, 0 },
        { "macauth",	0, NULL, 0 },
        { "macreauth",	0, NULL, 0 },
        { "macauthdeny",	0, NULL, 0 },
        { "macallowed",	1, NULL, 0 },
        { "macsuffix",	1, NULL, 0 },
        { "macpasswd",	1, NULL, 0 },
        { "macallowlocal",	0, NULL, 0 },
        { "strictmacauth",	0, NULL, 0 },
        { "strictdhcp",	0, NULL, 0 },
        { "wwwdir",	1, NULL, 0 },
        { "wwwbin",	1, NULL, 0 },
        { "uamui",	1, NULL, 0 },
        { "adminuser",	1, NULL, 0 },
        { "adminpasswd",	1, NULL, 0 },
        { "adminupdatefile",	1, NULL, 0 },
        { "rtmonfile",	1, NULL, 0 },
        { "ethers",	1, NULL, 0 },
        { "nasmac",	1, NULL, 0 },
        { "nasip",	1, NULL, 0 },
        { "ssid",	1, NULL, 0 },
        { "vlan",	1, NULL, 0 },
        { "ieee8021q",	0, NULL, 0 },
        { "only8021q",	0, NULL, 0 },
        { "cmdsocket",	1, NULL, 0 },
        { "cmdsocketport",	1, NULL, 0 },
        { "radiusoriginalurl",	0, NULL, 0 },
        { "swapoctets",	0, NULL, 0 },
        { "usestatusfile",	1, NULL, 0 },
        { "statusfilesave",	0, NULL, 0 },
        { "localusers",	1, NULL, 0 },
        { "postauthproxy",	1, NULL, 0 },
        { "postauthproxyport",	1, NULL, 0 },
        { "postauthproxyssl",	0, NULL, 0 },
        { "wpaguests",	0, NULL, 0 },
        { "openidauth",	0, NULL, 0 },
        { "papalwaysok",	0, NULL, 0 },
        { "mschapv2",	0, NULL, 0 },
        { "chillixml",	0, NULL, 0 },
        { "acctupdate",	0, NULL, 0 },
        { "dnsparanoia",	0, NULL, 0 },
        { "seskeepalive",	0, NULL, 0 },
        { "wpadpacfile",	1, NULL, 0 },
        { "usetap",	0, NULL, 0 },
        { "noarpentries",	0, NULL, 0 },
        { "routeif",	1, NULL, 0 },
        { "framedservice",	0, NULL, 0 },
        { "tcpwin",	1, NULL, 0 },
        { "scalewin",	0, NULL, 0 },
        { "tcpmss",	1, NULL, 0 },
        { "maxclients",	1, NULL, 0 },
        { "dhcphashsize",	1, NULL, 0 },
        { "radiusqsize",	1, NULL, 0 },
        { "nochallenge",	0, NULL, 0 },
        { "challengetimeout",	1, NULL, 0 },
        { "challengetimeout2",	1, NULL, 0 },
        { "redir",	0, NULL, 0 },
        { "inject",	1, NULL, 0 },
        { "injectext",	1, NULL, 0 },
        { "injectwispr",	0, NULL, 0 },
        { "redirurl",	0, NULL, 0 },
        { "routeonetone",	0, NULL, 0 },
        { "nousergardendata",	0, NULL, 0 },
        { "uamgardendata",	0, NULL, 0 },
        { "uamotherdata",	0, NULL, 0 },
        { "sslkeyfile",	1, NULL, 0 },
        { "sslkeypass",	1, NULL, 0 },
        { "sslcertfile",	1, NULL, 0 },
        { "sslcafile",	1, NULL, 0 },
        { "unixipc",	1, NULL, 0 },
        { "uamallowpost",	0, NULL, 0 },
        { "natip",	1, NULL, 0 },
        { "natport",	1, NULL, 0 },
        { "redirssl",	0, NULL, 0 },
        { "uamuissl",	0, NULL, 0 },
        { "dnslog",	1, NULL, 0 },
        { "ipwhitelist",	1, NULL, 0 },
        { "uamdomainfile",	1, NULL, 0 },
        { "layer3",	0, NULL, 0 },
        { "ipsrcallowed",	1, NULL, 0 },
        { "patricia",	0, NULL, 0 },
        { "redirdnsreq",	0, NULL, 0 },
        { "kname",	1, NULL, 0 },
        { "moddir",	1, NULL, 0 },
        { "module",	1, NULL, 0 },
        { "dhcpopt",	1, NULL, 0 },
        { "extadmvsa",	1, NULL, 0 },
        { "dhcpnotidle",	0, NULL, 0 },
        { "forcedns1",	1, NULL, 0 },
        { "forcedns1port",	1, NULL, 0 },
        { "forcedns2",	1, NULL, 0 },
        { "forcedns2port",	1, NULL, 0 },
        { "dnspersession",	0, NULL, 0 },
        { "ipv6",	0, NULL, 0 },
        { "ipv6mode",	1, NULL, 0 },
        { "ipv6only",	0, NULL, 0 },
        { 0,  0, 0, 0 }
      };

      c = getopt_long (argc, argv, "hVfdb:rFc:n:", long_options, &option_index);

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        case 'h':	/* Print help and exit.  */
        
        
          if (update_arg( 0 , 
               0 , &(args_info->help_given),
              &(local_args_info.help_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "help", 'h',
              additional_error))
            goto failure;
          cmdline_parser_free (&local_args_info);
          return 0;
        
          break;
        case 'V':	/* Print version and exit.  */
        
        
          if (update_arg( 0 , 
               0 , &(args_info->version_given),
              &(local_args_info.version_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "version", 'V',
              additional_error))
            goto failure;
          cmdline_parser_free (&local_args_info);
          return 0;
        
          break;
        case 'f':	/* Run in foreground.  */
        
        
          if (update_arg((void *)&(args_info->fg_flag), 0, &(args_info->fg_given),
              &(local_args_info.fg_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "fg", 'f',
              additional_error))
            goto failure;
        
          break;
        case 'd':	/* Run in debug mode.  */
        
        
          if (update_arg((void *)&(args_info->debug_flag), 0, &(args_info->debug_given),
              &(local_args_info.debug_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "debug", 'd',
              additional_error))
            goto failure;
        
          break;
        case 'b':	/* Binary config file.  */
        
        
          if (update_arg( (void *)&(args_info->bin_arg), 
               &(args_info->bin_orig), &(args_info->bin_given),
              &(local_args_info.bin_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "bin", 'b',
              additional_error))
            goto failure;
        
          break;
        case 'r':	/* Send reload after reconfigure.  */
        
        
          if (update_arg((void *)&(args_info->reload_flag), 0, &(args_info->reload_given),
              &(local_args_info.reload_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "reload", 'r',
              additional_error))
            goto failure;
        
          break;
        case 'F':	/* Forgiving of many configuration errors.  */
        
        
          if (update_arg((void *)&(args_info->forgiving_flag), 0, &(args_info->forgiving_given),
              &(local_args_info.forgiving_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "forgiving", 'F',
              additional_error))
            goto failure;
        
          break;
        case 'c':	/* Read configuration file.  */
        
        
          if (update_arg( (void *)&(args_info->conf_arg), 
               &(args_info->conf_orig), &(args_info->conf_given),
              &(local_args_info.conf_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "conf", 'c',
              additional_error))
            goto failure;
        
          break;
        case 'n':	/* Network.  */
        
        
          if (update_arg( (void *)&(args_info->net_arg), 
               &(args_info->net_orig), &(args_info->net_given),
              &(local_args_info.net_given), optarg, 0, "192.168.182.0/24", ARG_STRING,
              check_ambiguity, override, 0, 0,
              "net", 'n',
              additional_error))
            goto failure;
        
          break;

        case 0:	/* Long option with no short option */
          /* Which modules to print debug messages for.  */
          if (strcmp (long_options[option_index].name, "debugfacility") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->debugfacility_arg), 
                 &(args_info->debugfacility_orig), &(args_info->debugfacility_given),
                &(local_args_info.debugfacility_given), optarg, 0, "1", ARG_INT,
                check_ambiguity, override, 0, 0,
                "debugfacility", '-',
                additional_error))
              goto failure;
          
          }
          /* Syslog facility to be used for logging (default LOG_DAEMON).  */
          else if (strcmp (long_options[option_index].name, "logfacility") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->logfacility_arg), 
                 &(args_info->logfacility_orig), &(args_info->logfacility_given),
                &(local_args_info.logfacility_given), optarg, 0, "3", ARG_INT,
                check_ambiguity, override, 0, 0,
                "logfacility", '-',
                additional_error))
              goto failure;
          
          }
          /* Syslog log level to use in setlogmask (0 emerg, 7 debug).  */
          else if (strcmp (long_options[option_index].name, "loglevel") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->loglevel_arg), 
                 &(args_info->loglevel_orig), &(args_info->loglevel_given),
                &(local_args_info.loglevel_given), optarg, 0, "6", ARG_INT,
                check_ambiguity, override, 0, 0,
                "loglevel", '-',
                additional_error))
              goto failure;
          
          }
          /* Re-read configuration file at this interval.  */
          else if (strcmp (long_options[option_index].name, "interval") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->interval_arg), 
                 &(args_info->interval_orig), &(args_info->interval_given),
                &(local_args_info.interval_given), optarg, 0, "3600", ARG_INT,
                check_ambiguity, override, 0, 0,
                "interval", '-',
                additional_error))
              goto failure;
          
          }
          /* Filename of process id file.  */
          else if (strcmp (long_options[option_index].name, "pidfile") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->pidfile_arg), 
                 &(args_info->pidfile_orig), &(args_info->pidfile_given),
                &(local_args_info.pidfile_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "pidfile", '-',
                additional_error))
              goto failure;
          
          }
          /* Directory of nonvolatile data.  */
          else if (strcmp (long_options[option_index].name, "statedir") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->statedir_arg), 
                 &(args_info->statedir_orig), &(args_info->statedir_given),
                &(local_args_info.statedir_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "statedir", '-',
                additional_error))
              goto failure;
          
          }
          /* UID to run as, after being started as root.  */
          else if (strcmp (long_options[option_index].name, "uid") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->uid_arg), 
                 &(args_info->uid_orig), &(args_info->uid_given),
                &(local_args_info.uid_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "uid", '-',
                additional_error))
              goto failure;
          
          }
          /* GID to run as, after being started as root.  */
          else if (strcmp (long_options[option_index].name, "gid") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->gid_arg), 
                 &(args_info->gid_orig), &(args_info->gid_given),
                &(local_args_info.gid_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "gid", '-',
                additional_error))
              goto failure;
          
          }
          /* Network DHCP Starting IP.  */
          else if (strcmp (long_options[option_index].name, "dhcpstart") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->dhcpstart_arg), 
                 &(args_info->dhcpstart_orig), &(args_info->dhcpstart_given),
                &(local_args_info.dhcpstart_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "dhcpstart", '-',
                additional_error))
              goto failure;
          
          }
          /* Network DHCP Ending IP.  */
          else if (strcmp (long_options[option_index].name, "dhcpend") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->dhcpend_arg), 
                 &(args_info->dhcpend_orig), &(args_info->dhcpend_given),
                &(local_args_info.dhcpend_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "dhcpend", '-',
                additional_error))
              goto failure;
          
          }
          /* Always broadcast DHCP responses.  */
          else if (strcmp (long_options[option_index].name, "dhcpbroadcast") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->dhcpbroadcast_flag), 0, &(args_info->dhcpbroadcast_given),
                &(local_args_info.dhcpbroadcast_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "dhcpbroadcast", '-',
                additional_error))
              goto failure;
          
          }
          /* Dynamic IP address pool.  */
          else if (strcmp (long_options[option_index].name, "dynip") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->dynip_arg), 
                 &(args_info->dynip_orig), &(args_info->dynip_given),
                &(local_args_info.dynip_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "dynip", '-',
                additional_error))
              goto failure;
          
          }
          /* No Dynamic IP assignment.  */
          else if (strcmp (long_options[option_index].name, "nodynip") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->nodynip_flag), 0, &(args_info->nodynip_given),
                &(local_args_info.nodynip_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "nodynip", '-',
                additional_error))
              goto failure;
          
          }
          /* Static IP address pool.  */
          else if (strcmp (long_options[option_index].name, "statip") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->statip_arg), 
                 &(args_info->statip_orig), &(args_info->statip_given),
                &(local_args_info.statip_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "statip", '-',
                additional_error))
              goto failure;
          
          }
          /* Network to exclude from uamanyip.  */
          else if (strcmp (long_options[option_index].name, "uamanyipex") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->uamanyipex_arg), 
                 &(args_info->uamanyipex_orig), &(args_info->uamanyipex_given),
                &(local_args_info.uamanyipex_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "uamanyipex", '-',
                additional_error))
              goto failure;
          
          }
          /* Network to exclude from uamnatanyip.  */
          else if (strcmp (long_options[option_index].name, "uamnatanyipex") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->uamnatanyipex_arg), 
                 &(args_info->uamnatanyipex_orig), &(args_info->uamnatanyipex_given),
                &(local_args_info.uamnatanyipex_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "uamnatanyipex", '-',
                additional_error))
              goto failure;
          
          }
          /* Primary DNS server IP address.  */
          else if (strcmp (long_options[option_index].name, "dns1") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->dns1_arg), 
                 &(args_info->dns1_orig), &(args_info->dns1_given),
                &(local_args_info.dns1_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "dns1", '-',
                additional_error))
              goto failure;
          
          }
          /* Secondary DNS server IP address.  */
          else if (strcmp (long_options[option_index].name, "dns2") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->dns2_arg), 
                 &(args_info->dns2_orig), &(args_info->dns2_given),
                &(local_args_info.dns2_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "dns2", '-',
                additional_error))
              goto failure;
          
          }
          /* Domain to use for DNS lookups.  */
          else if (strcmp (long_options[option_index].name, "domain") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->domain_arg), 
                 &(args_info->domain_orig), &(args_info->domain_given),
                &(local_args_info.domain_given), optarg, 0, "coova.org", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "domain", '-',
                additional_error))
              goto failure;
          
          }
          /* Script to run after link-up.  */
          else if (strcmp (long_options[option_index].name, "ipup") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->ipup_arg), 
                 &(args_info->ipup_orig), &(args_info->ipup_given),
                &(local_args_info.ipup_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "ipup", '-',
                additional_error))
              goto failure;
          
          }
          /* Script to run after link-down.  */
          else if (strcmp (long_options[option_index].name, "ipdown") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->ipdown_arg), 
                 &(args_info->ipdown_orig), &(args_info->ipdown_given),
                &(local_args_info.ipdown_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "ipdown", '-',
                additional_error))
              goto failure;
          
          }
          /* Script to run after user logon.  */
          else if (strcmp (long_options[option_index].name, "conup") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->conup_arg), 
                 &(args_info->conup_orig), &(args_info->conup_given),
                &(local_args_info.conup_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "conup", '-',
                additional_error))
              goto failure;
          
          }
          /* Script to run after user logoff.  */
          else if (strcmp (long_options[option_index].name, "condown") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->condown_arg), 
                 &(args_info->condown_orig), &(args_info->condown_given),
                &(local_args_info.condown_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "condown", '-',
                additional_error))
              goto failure;
          
          }
          /* Script to run after initial DHCP.  */
          else if (strcmp (long_options[option_index].name, "macup") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->macup_arg), 
                 &(args_info->macup_orig), &(args_info->macup_given),
                &(local_args_info.macup_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "macup", '-',
                additional_error))
              goto failure;
          
          }
          /* Script to run after DHCP release.  */
          else if (strcmp (long_options[option_index].name, "macdown") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->macdown_arg), 
                 &(args_info->macdown_orig), &(args_info->macdown_given),
                &(local_args_info.macdown_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "macdown", '-',
                additional_error))
              goto failure;
          
          }
          /* Script to run after 802.1Q/VLAN id assignment.  */
          else if (strcmp (long_options[option_index].name, "vlanupdate") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->vlanupdate_arg), 
                 &(args_info->vlanupdate_orig), &(args_info->vlanupdate_given),
                &(local_args_info.vlanupdate_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "vlanupdate", '-',
                additional_error))
              goto failure;
          
          }
          /* VLAN is to be used as location.  */
          else if (strcmp (long_options[option_index].name, "vlanlocation") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->vlanlocation_flag), 0, &(args_info->vlanlocation_given),
                &(local_args_info.vlanlocation_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "vlanlocation", '-',
                additional_error))
              goto failure;
          
          }
          /* Script to run after change of location.  */
          else if (strcmp (long_options[option_index].name, "locationupdate") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->locationupdate_arg), 
                 &(args_info->locationupdate_orig), &(args_info->locationupdate_given),
                &(local_args_info.locationupdate_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "locationupdate", '-',
                additional_error))
              goto failure;
          
          }
          /* Restart the RADIUS accounting stream with new session-id.  */
          else if (strcmp (long_options[option_index].name, "locationstopstart") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->locationstopstart_flag), 0, &(args_info->locationstopstart_given),
                &(local_args_info.locationstopstart_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "locationstopstart", '-',
                additional_error))
              goto failure;
          
          }
          /* Copy Called-Station-Id from proxy RADIUS.  */
          else if (strcmp (long_options[option_index].name, "locationcopycalled") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->locationcopycalled_flag), 0, &(args_info->locationcopycalled_given),
                &(local_args_info.locationcopycalled_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "locationcopycalled", '-',
                additional_error))
              goto failure;
          
          }
          /* Immediately do an accounting interim update on proxy accounting.  */
          else if (strcmp (long_options[option_index].name, "locationimmediateupdate") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->locationimmediateupdate_flag), 0, &(args_info->locationimmediateupdate_given),
                &(local_args_info.locationimmediateupdate_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "locationimmediateupdate", '-',
                additional_error))
              goto failure;
          
          }
          /* Use DHCP Option 82 for location.  */
          else if (strcmp (long_options[option_index].name, "locationopt82") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->locationopt82_flag), 0, &(args_info->locationopt82_given),
                &(local_args_info.locationopt82_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "locationopt82", '-',
                additional_error))
              goto failure;
          
          }
          /* TX Queue length for tun interface (linux only).  */
          else if (strcmp (long_options[option_index].name, "txqlen") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->txqlen_arg), 
                 &(args_info->txqlen_orig), &(args_info->txqlen_given),
                &(local_args_info.txqlen_given), optarg, 0, "100", ARG_INT,
                check_ambiguity, override, 0, 0,
                "txqlen", '-',
                additional_error))
              goto failure;
          
          }
          /* TUN/TAP Device, as in tun0 or tap1.  */
          else if (strcmp (long_options[option_index].name, "tundev") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->tundev_arg), 
                 &(args_info->tundev_orig), &(args_info->tundev_given),
                &(local_args_info.tundev_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "tundev", '-',
                additional_error))
              goto failure;
          
          }
          /* MTU given in DHCP.  */
          else if (strcmp (long_options[option_index].name, "mtu") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->mtu_arg), 
                 &(args_info->mtu_orig), &(args_info->mtu_given),
                &(local_args_info.mtu_given), optarg, 0, "1500", ARG_INT,
                check_ambiguity, override, 0, 0,
                "mtu", '-',
                additional_error))
              goto failure;
          
          }
          /* Auto- static ip assignment.  */
          else if (strcmp (long_options[option_index].name, "autostatip") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->autostatip_arg), 
                 &(args_info->autostatip_orig), &(args_info->autostatip_given),
                &(local_args_info.autostatip_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "autostatip", '-',
                additional_error))
              goto failure;
          
          }
          /* Enable use of MMAP Rings (in Linux only).  */
          else if (strcmp (long_options[option_index].name, "mmapring") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->mmapring_flag), 0, &(args_info->mmapring_given),
                &(local_args_info.mmapring_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "mmapring", '-',
                additional_error))
              goto failure;
          
          }
          /* TX/RX Ring Size (in kbytes; linux only).  */
          else if (strcmp (long_options[option_index].name, "ringsize") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->ringsize_arg), 
                 &(args_info->ringsize_orig), &(args_info->ringsize_given),
                &(local_args_info.ringsize_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "ringsize", '-',
                additional_error))
              goto failure;
          
          }
          /* SNDBUF size (in kb).  */
          else if (strcmp (long_options[option_index].name, "sndbuf") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->sndbuf_arg), 
                 &(args_info->sndbuf_orig), &(args_info->sndbuf_given),
                &(local_args_info.sndbuf_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "sndbuf", '-',
                additional_error))
              goto failure;
          
          }
          /* RCVBUF size (in kb).  */
          else if (strcmp (long_options[option_index].name, "rcvbuf") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->rcvbuf_arg), 
                 &(args_info->rcvbuf_orig), &(args_info->rcvbuf_given),
                &(local_args_info.rcvbuf_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "rcvbuf", '-',
                additional_error))
              goto failure;
          
          }
          /* Maximum number of child processes.  */
          else if (strcmp (long_options[option_index].name, "childmax") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->childmax_arg), 
                 &(args_info->childmax_orig), &(args_info->childmax_given),
                &(local_args_info.childmax_given), optarg, 0, "128", ARG_INT,
                check_ambiguity, override, 0, 0,
                "childmax", '-',
                additional_error))
              goto failure;
          
          }
          /* Cluster peer ID.  */
          else if (strcmp (long_options[option_index].name, "peerid") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->peerid_arg), 
                 &(args_info->peerid_orig), &(args_info->peerid_given),
                &(local_args_info.peerid_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "peerid", '-',
                additional_error))
              goto failure;
          
          }
          /* Cluster Blowfish key.  */
          else if (strcmp (long_options[option_index].name, "peerkey") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->peerkey_arg), 
                 &(args_info->peerkey_orig), &(args_info->peerkey_given),
                &(local_args_info.peerkey_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "peerkey", '-',
                additional_error))
              goto failure;
          
          }
          /* IP address to send from.  */
          else if (strcmp (long_options[option_index].name, "radiuslisten") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->radiuslisten_arg), 
                 &(args_info->radiuslisten_orig), &(args_info->radiuslisten_given),
                &(local_args_info.radiuslisten_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "radiuslisten", '-',
                additional_error))
              goto failure;
          
          }
          /* IP address of radius server 1.  */
          else if (strcmp (long_options[option_index].name, "radiusserver1") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->radiusserver1_arg), 
                 &(args_info->radiusserver1_orig), &(args_info->radiusserver1_given),
                &(local_args_info.radiusserver1_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "radiusserver1", '-',
                additional_error))
              goto failure;
          
          }
          /* IP address of radius server 2.  */
          else if (strcmp (long_options[option_index].name, "radiusserver2") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->radiusserver2_arg), 
                 &(args_info->radiusserver2_orig), &(args_info->radiusserver2_given),
                &(local_args_info.radiusserver2_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "radiusserver2", '-',
                additional_error))
              goto failure;
          
          }
          /* Authentication UDP port of radius server.  */
          else if (strcmp (long_options[option_index].name, "radiusauthport") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->radiusauthport_arg), 
                 &(args_info->radiusauthport_orig), &(args_info->radiusauthport_given),
                &(local_args_info.radiusauthport_given), optarg, 0, "1812", ARG_INT,
                check_ambiguity, override, 0, 0,
                "radiusauthport", '-',
                additional_error))
              goto failure;
          
          }
          /* Accounting UDP port of radius server.  */
          else if (strcmp (long_options[option_index].name, "radiusacctport") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->radiusacctport_arg), 
                 &(args_info->radiusacctport_orig), &(args_info->radiusacctport_given),
                &(local_args_info.radiusacctport_given), optarg, 0, "1813", ARG_INT,
                check_ambiguity, override, 0, 0,
                "radiusacctport", '-',
                additional_error))
              goto failure;
          
          }
          /* Radius shared secret.  */
          else if (strcmp (long_options[option_index].name, "radiussecret") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->radiussecret_arg), 
                 &(args_info->radiussecret_orig), &(args_info->radiussecret_given),
                &(local_args_info.radiussecret_given), optarg, 0, "testing123", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "radiussecret", '-',
                additional_error))
              goto failure;
          
          }
          /* Retry timeout in seconds.  */
          else if (strcmp (long_options[option_index].name, "radiustimeout") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->radiustimeout_arg), 
                 &(args_info->radiustimeout_orig), &(args_info->radiustimeout_given),
                &(local_args_info.radiustimeout_given), optarg, 0, "10", ARG_INT,
                check_ambiguity, override, 0, 0,
                "radiustimeout", '-',
                additional_error))
              goto failure;
          
          }
          /* Total number of retries.  */
          else if (strcmp (long_options[option_index].name, "radiusretry") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->radiusretry_arg), 
                 &(args_info->radiusretry_orig), &(args_info->radiusretry_given),
                &(local_args_info.radiusretry_given), optarg, 0, "4", ARG_INT,
                check_ambiguity, override, 0, 0,
                "radiusretry", '-',
                additional_error))
              goto failure;
          
          }
          /* Number of retries before using secondary.  */
          else if (strcmp (long_options[option_index].name, "radiusretrysec") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->radiusretrysec_arg), 
                 &(args_info->radiusretrysec_orig), &(args_info->radiusretrysec_given),
                &(local_args_info.radiusretrysec_given), optarg, 0, "2", ARG_INT,
                check_ambiguity, override, 0, 0,
                "radiusretrysec", '-',
                additional_error))
              goto failure;
          
          }
          /* Radius NAS-Identifier.  */
          else if (strcmp (long_options[option_index].name, "radiusnasid") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->radiusnasid_arg), 
                 &(args_info->radiusnasid_orig), &(args_info->radiusnasid_given),
                &(local_args_info.radiusnasid_given), optarg, 0, "nas01", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "radiusnasid", '-',
                additional_error))
              goto failure;
          
          }
          /* WISPr Location ID.  */
          else if (strcmp (long_options[option_index].name, "radiuslocationid") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->radiuslocationid_arg), 
                 &(args_info->radiuslocationid_orig), &(args_info->radiuslocationid_given),
                &(local_args_info.radiuslocationid_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "radiuslocationid", '-',
                additional_error))
              goto failure;
          
          }
          /* WISPr Location Name.  */
          else if (strcmp (long_options[option_index].name, "radiuslocationname") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->radiuslocationname_arg), 
                 &(args_info->radiuslocationname_orig), &(args_info->radiuslocationname_given),
                &(local_args_info.radiuslocationname_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "radiuslocationname", '-',
                additional_error))
              goto failure;
          
          }
          /* Location Name.  */
          else if (strcmp (long_options[option_index].name, "locationname") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->locationname_arg), 
                 &(args_info->locationname_orig), &(args_info->locationname_given),
                &(local_args_info.locationname_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "locationname", '-',
                additional_error))
              goto failure;
          
          }
          /* Radius NAS-Port-Type.  */
          else if (strcmp (long_options[option_index].name, "radiusnasporttype") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->radiusnasporttype_arg), 
                 &(args_info->radiusnasporttype_orig), &(args_info->radiusnasporttype_given),
                &(local_args_info.radiusnasporttype_given), optarg, 0, "19", ARG_INT,
                check_ambiguity, override, 0, 0,
                "radiusnasporttype", '-',
                additional_error))
              goto failure;
          
          }
          /* Radius disconnect port to listen to.  */
          else if (strcmp (long_options[option_index].name, "coaport") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->coaport_arg), 
                 &(args_info->coaport_orig), &(args_info->coaport_given),
                &(local_args_info.coaport_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "coaport", '-',
                additional_error))
              goto failure;
          
          }
          /* Allow radius disconnect from any IP.  */
          else if (strcmp (long_options[option_index].name, "coanoipcheck") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->coanoipcheck_flag), 0, &(args_info->coanoipcheck_given),
                &(local_args_info.coanoipcheck_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "coanoipcheck", '-',
                additional_error))
              goto failure;
          
          }
          /* Allow all sessions when RADIUS is not available.  */
          else if (strcmp (long_options[option_index].name, "noradallow") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->noradallow_flag), 0, &(args_info->noradallow_given),
                &(local_args_info.noradallow_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "noradallow", '-',
                additional_error))
              goto failure;
          
          }
          /* Proxy IP address to listen on.  */
          else if (strcmp (long_options[option_index].name, "proxylisten") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->proxylisten_arg), 
                 &(args_info->proxylisten_orig), &(args_info->proxylisten_given),
                &(local_args_info.proxylisten_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "proxylisten", '-',
                additional_error))
              goto failure;
          
          }
          /* Proxy UDP port to listen on (0 is off).  */
          else if (strcmp (long_options[option_index].name, "proxyport") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->proxyport_arg), 
                 &(args_info->proxyport_orig), &(args_info->proxyport_given),
                &(local_args_info.proxyport_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "proxyport", '-',
                additional_error))
              goto failure;
          
          }
          /* IP address of proxy client(s).  */
          else if (strcmp (long_options[option_index].name, "proxyclient") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->proxyclient_arg), 
                 &(args_info->proxyclient_orig), &(args_info->proxyclient_given),
                &(local_args_info.proxyclient_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "proxyclient", '-',
                additional_error))
              goto failure;
          
          }
          /* Radius proxy shared secret.  */
          else if (strcmp (long_options[option_index].name, "proxysecret") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->proxysecret_arg), 
                 &(args_info->proxysecret_orig), &(args_info->proxysecret_given),
                &(local_args_info.proxysecret_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "proxysecret", '-',
                additional_error))
              goto failure;
          
          }
          /* Auto-accept non-EAP requests on proxy port.  */
          else if (strcmp (long_options[option_index].name, "proxymacaccept") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->proxymacaccept_flag), 0, &(args_info->proxymacaccept_given),
                &(local_args_info.proxymacaccept_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "proxymacaccept", '-',
                additional_error))
              goto failure;
          
          }
          /* Proxy through to chilli RADIUS accounting packets.  */
          else if (strcmp (long_options[option_index].name, "proxyonacct") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->proxyonacct_flag), 0, &(args_info->proxyonacct_given),
                &(local_args_info.proxyonacct_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "proxyonacct", '-',
                additional_error))
              goto failure;
          
          }
          /* The attribute in proxy to be used for the loc= query string parameter.  */
          else if (strcmp (long_options[option_index].name, "proxylocattr") == 0)
          {
          
            if (update_multiple_arg_temp(&proxylocattr_list, 
                &(local_args_info.proxylocattr_given), optarg, 0, 0, ARG_STRING,
                "proxylocattr", '-',
                additional_error))
              goto failure;
          
          }
          /* Local Ethernet interface.  */
          else if (strcmp (long_options[option_index].name, "dhcpif") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->dhcpif_arg), 
                 &(args_info->dhcpif_orig), &(args_info->dhcpif_given),
                &(local_args_info.dhcpif_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "dhcpif", '-',
                additional_error))
              goto failure;
          
          }
          /* Multi-LAN more interfaces.  */
          else if (strcmp (long_options[option_index].name, "moreif") == 0)
          {
          
            if (update_multiple_arg_temp(&moreif_list, 
                &(local_args_info.moreif_given), optarg, 0, 0, ARG_STRING,
                "moreif", '-',
                additional_error))
              goto failure;
          
          }
          /* DHCP Interface MAC Address.  */
          else if (strcmp (long_options[option_index].name, "dhcpmac") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->dhcpmac_arg), 
                 &(args_info->dhcpmac_orig), &(args_info->dhcpmac_given),
                &(local_args_info.dhcpmac_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "dhcpmac", '-',
                additional_error))
              goto failure;
          
          }
          /* Option to have dhcpif configured with dhcpmac.  */
          else if (strcmp (long_options[option_index].name, "dhcpmacset") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->dhcpmacset_flag), 0, &(args_info->dhcpmacset_given),
                &(local_args_info.dhcpmacset_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "dhcpmacset", '-',
                additional_error))
              goto failure;
          
          }
          /* Next Hop MAC address.  */
          else if (strcmp (long_options[option_index].name, "nexthop") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->nexthop_arg), 
                 &(args_info->nexthop_orig), &(args_info->nexthop_given),
                &(local_args_info.nexthop_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "nexthop", '-',
                additional_error))
              goto failure;
          
          }
          /* Map certain DHCP options to RADIUS attributes.  */
          else if (strcmp (long_options[option_index].name, "dhcpradius") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->dhcpradius_flag), 0, &(args_info->dhcpradius_given),
                &(local_args_info.dhcpradius_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "dhcpradius", '-',
                additional_error))
              goto failure;
          
          }
          /* DHCP gateway addresss for relay.  */
          else if (strcmp (long_options[option_index].name, "dhcpgateway") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->dhcpgateway_arg), 
                 &(args_info->dhcpgateway_orig), &(args_info->dhcpgateway_given),
                &(local_args_info.dhcpgateway_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "dhcpgateway", '-',
                additional_error))
              goto failure;
          
          }
          /* DHCP gateway port for relay.  */
          else if (strcmp (long_options[option_index].name, "dhcpgatewayport") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->dhcpgatewayport_arg), 
                 &(args_info->dhcpgatewayport_orig), &(args_info->dhcpgatewayport_given),
                &(local_args_info.dhcpgatewayport_given), optarg, 0, "67", ARG_INT,
                check_ambiguity, override, 0, 0,
                "dhcpgatewayport", '-',
                additional_error))
              goto failure;
          
          }
          /* DHCP relay agent IP addresss (default uamlisten).  */
          else if (strcmp (long_options[option_index].name, "dhcprelayagent") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->dhcprelayagent_arg), 
                 &(args_info->dhcprelayagent_orig), &(args_info->dhcprelayagent_given),
                &(local_args_info.dhcprelayagent_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "dhcprelayagent", '-',
                additional_error))
              goto failure;
          
          }
          /* Lease time to allocate to clients.  */
          else if (strcmp (long_options[option_index].name, "lease") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->lease_arg), 
                 &(args_info->lease_orig), &(args_info->lease_given),
                &(local_args_info.lease_given), optarg, 0, "600", ARG_INT,
                check_ambiguity, override, 0, 0,
                "lease", '-',
                additional_error))
              goto failure;
          
          }
          /* Lease grace period time before removal.  */
          else if (strcmp (long_options[option_index].name, "leaseplus") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->leaseplus_arg), 
                 &(args_info->leaseplus_orig), &(args_info->leaseplus_given),
                &(local_args_info.leaseplus_given), optarg, 0, "60", ARG_INT,
                check_ambiguity, override, 0, 0,
                "leaseplus", '-',
                additional_error))
              goto failure;
          
          }
          /* Setup clients for /32 network.  */
          else if (strcmp (long_options[option_index].name, "noc2c") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->noc2c_flag), 0, &(args_info->noc2c_given),
                &(local_args_info.noc2c_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "noc2c", '-',
                additional_error))
              goto failure;
          
          }
          /* Enable IEEE 802.1x authentication.  */
          else if (strcmp (long_options[option_index].name, "eapolenable") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->eapolenable_flag), 0, &(args_info->eapolenable_given),
                &(local_args_info.eapolenable_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "eapolenable", '-',
                additional_error))
              goto failure;
          
          }
          /* URL of authentication web server.  */
          else if (strcmp (long_options[option_index].name, "uamserver") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->uamserver_arg), 
                 &(args_info->uamserver_orig), &(args_info->uamserver_given),
                &(local_args_info.uamserver_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "uamserver", '-',
                additional_error))
              goto failure;
          
          }
          /* URL of homepage to redirect unauthenticated users to.  */
          else if (strcmp (long_options[option_index].name, "uamhomepage") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->uamhomepage_arg), 
                 &(args_info->uamhomepage_orig), &(args_info->uamhomepage_given),
                &(local_args_info.uamhomepage_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "uamhomepage", '-',
                additional_error))
              goto failure;
          
          }
          /* Shared secret between uamserver and chilli.  */
          else if (strcmp (long_options[option_index].name, "uamsecret") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->uamsecret_arg), 
                 &(args_info->uamsecret_orig), &(args_info->uamsecret_given),
                &(local_args_info.uamsecret_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "uamsecret", '-',
                additional_error))
              goto failure;
          
          }
          /* IP address to listen to for authentication requests.  */
          else if (strcmp (long_options[option_index].name, "uamlisten") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->uamlisten_arg), 
                 &(args_info->uamlisten_orig), &(args_info->uamlisten_given),
                &(local_args_info.uamlisten_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "uamlisten", '-',
                additional_error))
              goto failure;
          
          }
          /* IP address for DHCP default gateway (defaults to uamlisten).  */
          else if (strcmp (long_options[option_index].name, "dhcplisten") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->dhcplisten_arg), 
                 &(args_info->dhcplisten_orig), &(args_info->dhcplisten_given),
                &(local_args_info.dhcplisten_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "dhcplisten", '-',
                additional_error))
              goto failure;
          
          }
          /* TCP port to bind to for authentication requests.  */
          else if (strcmp (long_options[option_index].name, "uamport") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->uamport_arg), 
                 &(args_info->uamport_orig), &(args_info->uamport_given),
                &(local_args_info.uamport_given), optarg, 0, "3990", ARG_INT,
                check_ambiguity, override, 0, 0,
                "uamport", '-',
                additional_error))
              goto failure;
          
          }
          /* TCP port to bind to for UAM UI requests.  */
          else if (strcmp (long_options[option_index].name, "uamuiport") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->uamuiport_arg), 
                 &(args_info->uamuiport_orig), &(args_info->uamuiport_given),
                &(local_args_info.uamuiport_given), optarg, 0, "3991", ARG_INT,
                check_ambiguity, override, 0, 0,
                "uamuiport", '-',
                additional_error))
              goto failure;
          
          }
          /* Resources exempt from access check .  */
          else if (strcmp (long_options[option_index].name, "uamallowed") == 0)
          {
          
            if (update_multiple_arg_temp(&uamallowed_list, 
                &(local_args_info.uamallowed_given), optarg, 0, 0, ARG_STRING,
                "uamallowed", '-',
                additional_error))
              goto failure;
          
          }
          /* Domain name allowed (active dns filtering; one per line!) .  */
          else if (strcmp (long_options[option_index].name, "uamdomain") == 0)
          {
          
            if (update_multiple_arg_temp(&uamdomain_list, 
                &(local_args_info.uamdomain_given), optarg, 0, 0, ARG_STRING,
                "uamdomain", '-',
                additional_error))
              goto failure;
          
          }
          /* DNS TTL to use (rewrite) when query matches a uamdomain.  */
          else if (strcmp (long_options[option_index].name, "uamdomainttl") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->uamdomainttl_arg), 
                 &(args_info->uamdomainttl_orig), &(args_info->uamdomainttl_given),
                &(local_args_info.uamdomainttl_given), optarg, 0, "60", ARG_INT,
                check_ambiguity, override, 0, 0,
                "uamdomainttl", '-',
                additional_error))
              goto failure;
          
          }
          /* Regular expression to match URLs (one per line) .  */
          else if (strcmp (long_options[option_index].name, "uamregex") == 0)
          {
          
            if (update_multiple_arg_temp(&uamregex_list, 
                &(local_args_info.uamregex_given), optarg, 0, 0, ARG_STRING,
                "uamregex", '-',
                additional_error))
              goto failure;
          
          }
          /* Do not attempt to use the system DNS for DHCP.  */
          else if (strcmp (long_options[option_index].name, "nosystemdns") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->nosystemdns_flag), 0, &(args_info->nosystemdns_given),
                &(local_args_info.nosystemdns_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "nosystemdns", '-',
                additional_error))
              goto failure;
          
          }
          /* Allow client to use any DNS server.  */
          else if (strcmp (long_options[option_index].name, "uamanydns") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->uamanydns_flag), 0, &(args_info->uamanydns_given),
                &(local_args_info.uamanydns_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "uamanydns", '-',
                additional_error))
              goto failure;
          
          }
          /* Allow client to use any IP Address.  */
          else if (strcmp (long_options[option_index].name, "uamanyip") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->uamanyip_flag), 0, &(args_info->uamanyip_given),
                &(local_args_info.uamanyip_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "uamanyip", '-',
                additional_error))
              goto failure;
          
          }
          /* Source NAT clients using anyip to an IP of dynip pool.  */
          else if (strcmp (long_options[option_index].name, "uamnatanyip") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->uamnatanyip_flag), 0, &(args_info->uamnatanyip_given),
                &(local_args_info.uamnatanyip_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "uamnatanyip", '-',
                additional_error))
              goto failure;
          
          }
          /* A specific WISPr login url to be used.  */
          else if (strcmp (long_options[option_index].name, "wisprlogin") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->wisprlogin_arg), 
                 &(args_info->wisprlogin_orig), &(args_info->wisprlogin_given),
                &(local_args_info.wisprlogin_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "wisprlogin", '-',
                additional_error))
              goto failure;
          
          }
          /* Do not return to the UAM server on success, original url instead.  */
          else if (strcmp (long_options[option_index].name, "nouamsuccess") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->nouamsuccess_flag), 0, &(args_info->nouamsuccess_given),
                &(local_args_info.nouamsuccess_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "nouamsuccess", '-',
                additional_error))
              goto failure;
          
          }
          /* Do not offer WISPr 1.0 XML.  */
          else if (strcmp (long_options[option_index].name, "nowispr1") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->nowispr1_flag), 0, &(args_info->nowispr1_given),
                &(local_args_info.nowispr1_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "nowispr1", '-',
                additional_error))
              goto failure;
          
          }
          /* Do not offer WISPr 2.0 XML.  */
          else if (strcmp (long_options[option_index].name, "nowispr2") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->nowispr2_flag), 0, &(args_info->nowispr2_given),
                &(local_args_info.nowispr2_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "nowispr2", '-',
                additional_error))
              goto failure;
          
          }
          /* HTTP Auto-Logout IP Address.  */
          else if (strcmp (long_options[option_index].name, "uamlogoutip") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->uamlogoutip_arg), 
                 &(args_info->uamlogoutip_orig), &(args_info->uamlogoutip_given),
                &(local_args_info.uamlogoutip_given), optarg, 0, "1.0.0.0", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "uamlogoutip", '-',
                additional_error))
              goto failure;
          
          }
          /* Special IP Address aliased (redirect) to uamlisten/uamport.  */
          else if (strcmp (long_options[option_index].name, "uamaliasip") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->uamaliasip_arg), 
                 &(args_info->uamaliasip_orig), &(args_info->uamaliasip_given),
                &(local_args_info.uamaliasip_given), optarg, 0, "1.0.0.1", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "uamaliasip", '-',
                additional_error))
              goto failure;
          
          }
          /* Special simple hostname (no dots) to be resolved to uamaliasip.  */
          else if (strcmp (long_options[option_index].name, "uamaliasname") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->uamaliasname_arg), 
                 &(args_info->uamaliasname_orig), &(args_info->uamaliasname_given),
                &(local_args_info.uamaliasname_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "uamaliasname", '-',
                additional_error))
              goto failure;
          
          }
          /* Special simple hostname (no dots) to be resolved to uamlisten.  */
          else if (strcmp (long_options[option_index].name, "uamhostname") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->uamhostname_arg), 
                 &(args_info->uamhostname_orig), &(args_info->uamhostname_given),
                &(local_args_info.uamhostname_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "uamhostname", '-',
                additional_error))
              goto failure;
          
          }
          /* Resources exempt from session limitations.  */
          else if (strcmp (long_options[option_index].name, "authedallowed") == 0)
          {
          
            if (update_multiple_arg_temp(&authedallowed_list, 
                &(local_args_info.authedallowed_given), optarg, 0, 0, ARG_STRING,
                "authedallowed", '-',
                additional_error))
              goto failure;
          
          }
          /* Use uamallowed as resources exempt from session limitations.  */
          else if (strcmp (long_options[option_index].name, "uamauthedallowed") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->uamauthedallowed_flag), 0, &(args_info->uamauthedallowed_given),
                &(local_args_info.uamauthedallowed_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "uamauthedallowed", '-',
                additional_error))
              goto failure;
          
          }
          /* UAM AAA URL specifying the URL to use for the Chilli HTTP AAA.  */
          else if (strcmp (long_options[option_index].name, "uamaaaurl") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->uamaaaurl_arg), 
                 &(args_info->uamaaaurl_orig), &(args_info->uamaaaurl_given),
                &(local_args_info.uamaaaurl_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "uamaaaurl", '-',
                additional_error))
              goto failure;
          
          }
          /* Option to consider all hostnames in domain as local.  */
          else if (strcmp (long_options[option_index].name, "domaindnslocal") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->domaindnslocal_flag), 0, &(args_info->domaindnslocal_given),
                &(local_args_info.domaindnslocal_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "domaindnslocal", '-',
                additional_error))
              goto failure;
          
          }
          /* Use RadSec tunning (requires SSL; not compatible with uamaaaurl).  */
          else if (strcmp (long_options[option_index].name, "radsec") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->radsec_flag), 0, &(args_info->radsec_given),
                &(local_args_info.radsec_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "radsec", '-',
                additional_error))
              goto failure;
          
          }
          /* Default session-timeout if not returned by RADIUS.  */
          else if (strcmp (long_options[option_index].name, "defsessiontimeout") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->defsessiontimeout_arg), 
                 &(args_info->defsessiontimeout_orig), &(args_info->defsessiontimeout_given),
                &(local_args_info.defsessiontimeout_given), optarg, 0, "0", ARG_LONG,
                check_ambiguity, override, 0, 0,
                "defsessiontimeout", '-',
                additional_error))
              goto failure;
          
          }
          /* Default idle-timeout if not returned by RADIUS.  */
          else if (strcmp (long_options[option_index].name, "defidletimeout") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->defidletimeout_arg), 
                 &(args_info->defidletimeout_orig), &(args_info->defidletimeout_given),
                &(local_args_info.defidletimeout_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "defidletimeout", '-',
                additional_error))
              goto failure;
          
          }
          /* Default WISPr-Bandwidth-Max-Down if not returned by RADIUS.  */
          else if (strcmp (long_options[option_index].name, "defbandwidthmaxdown") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->defbandwidthmaxdown_arg), 
                 &(args_info->defbandwidthmaxdown_orig), &(args_info->defbandwidthmaxdown_given),
                &(local_args_info.defbandwidthmaxdown_given), optarg, 0, "0", ARG_LONG,
                check_ambiguity, override, 0, 0,
                "defbandwidthmaxdown", '-',
                additional_error))
              goto failure;
          
          }
          /* Default WISPr-Bandwidth-Max-Up if not returned by RADIUS.  */
          else if (strcmp (long_options[option_index].name, "defbandwidthmaxup") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->defbandwidthmaxup_arg), 
                 &(args_info->defbandwidthmaxup_orig), &(args_info->defbandwidthmaxup_given),
                &(local_args_info.defbandwidthmaxup_given), optarg, 0, "0", ARG_LONG,
                check_ambiguity, override, 0, 0,
                "defbandwidthmaxup", '-',
                additional_error))
              goto failure;
          
          }
          /* Default interim-interval for accounting if not returned by RADIUS.  */
          else if (strcmp (long_options[option_index].name, "definteriminterval") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->definteriminterval_arg), 
                 &(args_info->definteriminterval_orig), &(args_info->definteriminterval_given),
                &(local_args_info.definteriminterval_given), optarg, 0, "300", ARG_INT,
                check_ambiguity, override, 0, 0,
                "definteriminterval", '-',
                additional_error))
              goto failure;
          
          }
          /* Define the up-bound 'leaky bucket' size.  */
          else if (strcmp (long_options[option_index].name, "bwbucketupsize") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->bwbucketupsize_arg), 
                 &(args_info->bwbucketupsize_orig), &(args_info->bwbucketupsize_given),
                &(local_args_info.bwbucketupsize_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "bwbucketupsize", '-',
                additional_error))
              goto failure;
          
          }
          /* Define the down-bound 'leaky bucket' size.  */
          else if (strcmp (long_options[option_index].name, "bwbucketdnsize") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->bwbucketdnsize_arg), 
                 &(args_info->bwbucketdnsize_orig), &(args_info->bwbucketdnsize_given),
                &(local_args_info.bwbucketdnsize_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "bwbucketdnsize", '-',
                additional_error))
              goto failure;
          
          }
          /* Define the minimum 'leaky bucket' size.  */
          else if (strcmp (long_options[option_index].name, "bwbucketminsize") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->bwbucketminsize_arg), 
                 &(args_info->bwbucketminsize_orig), &(args_info->bwbucketminsize_given),
                &(local_args_info.bwbucketminsize_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "bwbucketminsize", '-',
                additional_error))
              goto failure;
          
          }
          /* Authenticate based on MAC address.  */
          else if (strcmp (long_options[option_index].name, "macauth") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->macauth_flag), 0, &(args_info->macauth_given),
                &(local_args_info.macauth_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "macauth", '-',
                additional_error))
              goto failure;
          
          }
          /* Re-Authenticate based on MAC address for every initial URL redirection.  */
          else if (strcmp (long_options[option_index].name, "macreauth") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->macreauth_flag), 0, &(args_info->macreauth_given),
                &(local_args_info.macreauth_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "macreauth", '-',
                additional_error))
              goto failure;
          
          }
          /* Deny access (even UAM) to MAC addresses given Access-Reject.  */
          else if (strcmp (long_options[option_index].name, "macauthdeny") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->macauthdeny_flag), 0, &(args_info->macauthdeny_given),
                &(local_args_info.macauthdeny_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "macauthdeny", '-',
                additional_error))
              goto failure;
          
          }
          /* List of allowed MAC addresses.  */
          else if (strcmp (long_options[option_index].name, "macallowed") == 0)
          {
          
            if (update_multiple_arg_temp(&macallowed_list, 
                &(local_args_info.macallowed_given), optarg, 0, 0, ARG_STRING,
                "macallowed", '-',
                additional_error))
              goto failure;
          
          }
          /* Suffix to add to the MAC address.  */
          else if (strcmp (long_options[option_index].name, "macsuffix") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->macsuffix_arg), 
                 &(args_info->macsuffix_orig), &(args_info->macsuffix_given),
                &(local_args_info.macsuffix_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "macsuffix", '-',
                additional_error))
              goto failure;
          
          }
          /* Password used when performing MAC authentication.  */
          else if (strcmp (long_options[option_index].name, "macpasswd") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->macpasswd_arg), 
                 &(args_info->macpasswd_orig), &(args_info->macpasswd_given),
                &(local_args_info.macpasswd_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "macpasswd", '-',
                additional_error))
              goto failure;
          
          }
          /* Do not use RADIUS for authenticating the macallowed.  */
          else if (strcmp (long_options[option_index].name, "macallowlocal") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->macallowlocal_flag), 0, &(args_info->macallowlocal_given),
                &(local_args_info.macallowlocal_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "macallowlocal", '-',
                additional_error))
              goto failure;
          
          }
          /* Be strict about MAC Auth (no DHCP reply until we get RADIUS reply).  */
          else if (strcmp (long_options[option_index].name, "strictmacauth") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->strictmacauth_flag), 0, &(args_info->strictmacauth_given),
                &(local_args_info.strictmacauth_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "strictmacauth", '-',
                additional_error))
              goto failure;
          
          }
          /* Be strict about only allocating dyn-pool from DHCP.  */
          else if (strcmp (long_options[option_index].name, "strictdhcp") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->strictdhcp_flag), 0, &(args_info->strictdhcp_given),
                &(local_args_info.strictdhcp_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "strictdhcp", '-',
                additional_error))
              goto failure;
          
          }
          /* Local content served by chilli (for splash page, etc).  */
          else if (strcmp (long_options[option_index].name, "wwwdir") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->wwwdir_arg), 
                 &(args_info->wwwdir_orig), &(args_info->wwwdir_given),
                &(local_args_info.wwwdir_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "wwwdir", '-',
                additional_error))
              goto failure;
          
          }
          /* Script binary (such as haserl) for simple web programming.  */
          else if (strcmp (long_options[option_index].name, "wwwbin") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->wwwbin_arg), 
                 &(args_info->wwwbin_orig), &(args_info->wwwbin_given),
                &(local_args_info.wwwbin_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "wwwbin", '-',
                additional_error))
              goto failure;
          
          }
          /* Program in inetd style to handle all uam requests.  */
          else if (strcmp (long_options[option_index].name, "uamui") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->uamui_arg), 
                 &(args_info->uamui_orig), &(args_info->uamui_given),
                &(local_args_info.uamui_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "uamui", '-',
                additional_error))
              goto failure;
          
          }
          /* RADIUS administrative user login username.  */
          else if (strcmp (long_options[option_index].name, "adminuser") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->adminuser_arg), 
                 &(args_info->adminuser_orig), &(args_info->adminuser_given),
                &(local_args_info.adminuser_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "adminuser", '-',
                additional_error))
              goto failure;
          
          }
          /* RADIUS administrative user login password.  */
          else if (strcmp (long_options[option_index].name, "adminpasswd") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->adminpasswd_arg), 
                 &(args_info->adminpasswd_orig), &(args_info->adminpasswd_given),
                &(local_args_info.adminpasswd_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "adminpasswd", '-',
                additional_error))
              goto failure;
          
          }
          /* File for administrative user CoovaChilli-Config settings.  */
          else if (strcmp (long_options[option_index].name, "adminupdatefile") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->adminupdatefile_arg), 
                 &(args_info->adminupdatefile_orig), &(args_info->adminupdatefile_given),
                &(local_args_info.adminupdatefile_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "adminupdatefile", '-',
                additional_error))
              goto failure;
          
          }
          /* File to update with routing settings.  */
          else if (strcmp (long_options[option_index].name, "rtmonfile") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->rtmonfile_arg), 
                 &(args_info->rtmonfile_orig), &(args_info->rtmonfile_given),
                &(local_args_info.rtmonfile_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "rtmonfile", '-',
                additional_error))
              goto failure;
          
          }
          /* File containing a mapping of MAC addresses to static IP addresses.  */
          else if (strcmp (long_options[option_index].name, "ethers") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->ethers_arg), 
                 &(args_info->ethers_orig), &(args_info->ethers_given),
                &(local_args_info.ethers_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "ethers", '-',
                additional_error))
              goto failure;
          
          }
          /* Unique MAC address of the NAS (called-station-id).  */
          else if (strcmp (long_options[option_index].name, "nasmac") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->nasmac_arg), 
                 &(args_info->nasmac_orig), &(args_info->nasmac_given),
                &(local_args_info.nasmac_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "nasmac", '-',
                additional_error))
              goto failure;
          
          }
          /* Unique IP address of the NAS (nas-ip-address).  */
          else if (strcmp (long_options[option_index].name, "nasip") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->nasip_arg), 
                 &(args_info->nasip_orig), &(args_info->nasip_given),
                &(local_args_info.nasip_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "nasip", '-',
                additional_error))
              goto failure;
          
          }
          /* SSID of the session.  */
          else if (strcmp (long_options[option_index].name, "ssid") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->ssid_arg), 
                 &(args_info->ssid_orig), &(args_info->ssid_given),
                &(local_args_info.ssid_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "ssid", '-',
                additional_error))
              goto failure;
          
          }
          /* VLAN of the session.  */
          else if (strcmp (long_options[option_index].name, "vlan") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->vlan_arg), 
                 &(args_info->vlan_orig), &(args_info->vlan_given),
                &(local_args_info.vlan_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "vlan", '-',
                additional_error))
              goto failure;
          
          }
          /* Support 802.1Q VLAN tagging.  */
          else if (strcmp (long_options[option_index].name, "ieee8021q") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->ieee8021q_flag), 0, &(args_info->ieee8021q_given),
                &(local_args_info.ieee8021q_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "ieee8021q", '-',
                additional_error))
              goto failure;
          
          }
          /* Support 802.1Q VLAN tagged traffic only.  */
          else if (strcmp (long_options[option_index].name, "only8021q") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->only8021q_flag), 0, &(args_info->only8021q_given),
                &(local_args_info.only8021q_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "only8021q", '-',
                additional_error))
              goto failure;
          
          }
          /* path to the command unix socket.  */
          else if (strcmp (long_options[option_index].name, "cmdsocket") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->cmdsocket_arg), 
                 &(args_info->cmdsocket_orig), &(args_info->cmdsocket_given),
                &(local_args_info.cmdsocket_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "cmdsocket", '-',
                additional_error))
              goto failure;
          
          }
          /* Port of command socket. Only used if cmdsocket is not defined..  */
          else if (strcmp (long_options[option_index].name, "cmdsocketport") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->cmdsocketport_arg), 
                 &(args_info->cmdsocketport_orig), &(args_info->cmdsocketport_given),
                &(local_args_info.cmdsocketport_given), optarg, 0, "42424", ARG_INT,
                check_ambiguity, override, 0, 0,
                "cmdsocketport", '-',
                additional_error))
              goto failure;
          
          }
          /* Turn on the sending of CoovaChilli-OriginalURL in Access-Request.  */
          else if (strcmp (long_options[option_index].name, "radiusoriginalurl") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->radiusoriginalurl_flag), 0, &(args_info->radiusoriginalurl_given),
                &(local_args_info.radiusoriginalurl_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "radiusoriginalurl", '-',
                additional_error))
              goto failure;
          
          }
          /* Swap the meaning of input/output octets/packets.  */
          else if (strcmp (long_options[option_index].name, "swapoctets") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->swapoctets_flag), 0, &(args_info->swapoctets_given),
                &(local_args_info.swapoctets_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "swapoctets", '-',
                additional_error))
              goto failure;
          
          }
          /* Use the status file to keep track of sessions.  */
          else if (strcmp (long_options[option_index].name, "usestatusfile") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->usestatusfile_arg), 
                 &(args_info->usestatusfile_orig), &(args_info->usestatusfile_given),
                &(local_args_info.usestatusfile_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "usestatusfile", '-',
                additional_error))
              goto failure;
          
          }
          /* Aggressively save the status of sessions to status file.  */
          else if (strcmp (long_options[option_index].name, "statusfilesave") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->statusfilesave_flag), 0, &(args_info->statusfilesave_given),
                &(local_args_info.statusfilesave_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "statusfilesave", '-',
                additional_error))
              goto failure;
          
          }
          /* File keep 'Local' usernames and passwords.  */
          else if (strcmp (long_options[option_index].name, "localusers") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->localusers_arg), 
                 &(args_info->localusers_orig), &(args_info->localusers_given),
                &(local_args_info.localusers_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "localusers", '-',
                additional_error))
              goto failure;
          
          }
          /* IP of an upstream transparent proxy.  */
          else if (strcmp (long_options[option_index].name, "postauthproxy") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->postauthproxy_arg), 
                 &(args_info->postauthproxy_orig), &(args_info->postauthproxy_given),
                &(local_args_info.postauthproxy_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "postauthproxy", '-',
                additional_error))
              goto failure;
          
          }
          /* Port of an upstream transparent proxy.  */
          else if (strcmp (long_options[option_index].name, "postauthproxyport") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->postauthproxyport_arg), 
                 &(args_info->postauthproxyport_orig), &(args_info->postauthproxyport_given),
                &(local_args_info.postauthproxyport_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "postauthproxyport", '-',
                additional_error))
              goto failure;
          
          }
          /* Send SSL to upstream transparent proxy.  */
          else if (strcmp (long_options[option_index].name, "postauthproxyssl") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->postauthproxyssl_flag), 0, &(args_info->postauthproxyssl_given),
                &(local_args_info.postauthproxyssl_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "postauthproxyssl", '-',
                additional_error))
              goto failure;
          
          }
          /* Allow WPA 'Guest' access.  */
          else if (strcmp (long_options[option_index].name, "wpaguests") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->wpaguests_flag), 0, &(args_info->wpaguests_given),
                &(local_args_info.wpaguests_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "wpaguests", '-',
                additional_error))
              goto failure;
          
          }
          /* Allow OpenID authentication.  */
          else if (strcmp (long_options[option_index].name, "openidauth") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->openidauth_flag), 0, &(args_info->openidauth_given),
                &(local_args_info.openidauth_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "openidauth", '-',
                additional_error))
              goto failure;
          
          }
          /* Always allow 'PAP' authentication (depreciated; always on).  */
          else if (strcmp (long_options[option_index].name, "papalwaysok") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->papalwaysok_flag), 0, &(args_info->papalwaysok_given),
                &(local_args_info.papalwaysok_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "papalwaysok", '-',
                additional_error))
              goto failure;
          
          }
          /* Use MSCHAPv2 authentication where possible.  */
          else if (strcmp (long_options[option_index].name, "mschapv2") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->mschapv2_flag), 0, &(args_info->mschapv2_given),
                &(local_args_info.mschapv2_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "mschapv2", '-',
                additional_error))
              goto failure;
          
          }
          /* Use CoovaChilli XML in WISPr blocks.  */
          else if (strcmp (long_options[option_index].name, "chillixml") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->chillixml_flag), 0, &(args_info->chillixml_given),
                &(local_args_info.chillixml_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "chillixml", '-',
                additional_error))
              goto failure;
          
          }
          /* Allow updating of session attributes in Accounting-Response.  */
          else if (strcmp (long_options[option_index].name, "acctupdate") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->acctupdate_flag), 0, &(args_info->acctupdate_given),
                &(local_args_info.acctupdate_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "acctupdate", '-',
                additional_error))
              goto failure;
          
          }
          /* Inspect DNS packets and drop responses with any non- A, CNAME, SOA, or MX records (to prevent dns tunnels).  */
          else if (strcmp (long_options[option_index].name, "dnsparanoia") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->dnsparanoia_flag), 0, &(args_info->dnsparanoia_given),
                &(local_args_info.dnsparanoia_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "dnsparanoia", '-',
                additional_error))
              goto failure;
          
          }
          /* Keep sessions 'alive' after a restart of the server.  */
          else if (strcmp (long_options[option_index].name, "seskeepalive") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->seskeepalive_flag), 0, &(args_info->seskeepalive_given),
                &(local_args_info.seskeepalive_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "seskeepalive", '-',
                additional_error))
              goto failure;
          
          }
          /* WPAD PAC file location.  */
          else if (strcmp (long_options[option_index].name, "wpadpacfile") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->wpadpacfile_arg), 
                 &(args_info->wpadpacfile_orig), &(args_info->wpadpacfile_given),
                &(local_args_info.wpadpacfile_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "wpadpacfile", '-',
                additional_error))
              goto failure;
          
          }
          /* Use a TAP instead of TUN (linux only).  */
          else if (strcmp (long_options[option_index].name, "usetap") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->usetap_flag), 0, &(args_info->usetap_given),
                &(local_args_info.usetap_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "usetap", '-',
                additional_error))
              goto failure;
          
          }
          /* Do not create arp table entries in when using TAP..  */
          else if (strcmp (long_options[option_index].name, "noarpentries") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->noarpentries_flag), 0, &(args_info->noarpentries_given),
                &(local_args_info.noarpentries_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "noarpentries", '-',
                additional_error))
              goto failure;
          
          }
          /* Turns on 'multi-routing' and defines default route.  */
          else if (strcmp (long_options[option_index].name, "routeif") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->routeif_arg), 
                 &(args_info->routeif_orig), &(args_info->routeif_given),
                &(local_args_info.routeif_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "routeif", '-',
                additional_error))
              goto failure;
          
          }
          /* Use Service-Type = Framed instead of Login.  */
          else if (strcmp (long_options[option_index].name, "framedservice") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->framedservice_flag), 0, &(args_info->framedservice_given),
                &(local_args_info.framedservice_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "framedservice", '-',
                additional_error))
              goto failure;
          
          }
          /* Change TCP window size to this value to help prevent congestion.  */
          else if (strcmp (long_options[option_index].name, "tcpwin") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->tcpwin_arg), 
                 &(args_info->tcpwin_orig), &(args_info->tcpwin_given),
                &(local_args_info.tcpwin_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "tcpwin", '-',
                additional_error))
              goto failure;
          
          }
          /* Scale the TCP window when bandwidth shaping.  */
          else if (strcmp (long_options[option_index].name, "scalewin") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->scalewin_flag), 0, &(args_info->scalewin_given),
                &(local_args_info.scalewin_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "scalewin", '-',
                additional_error))
              goto failure;
          
          }
          /* Change TCP maximum window size (mss) option in TCP traffic.  */
          else if (strcmp (long_options[option_index].name, "tcpmss") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->tcpmss_arg), 
                 &(args_info->tcpmss_orig), &(args_info->tcpmss_given),
                &(local_args_info.tcpmss_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "tcpmss", '-',
                additional_error))
              goto failure;
          
          }
          /* Maximum number of clients/subscribers.  */
          else if (strcmp (long_options[option_index].name, "maxclients") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->maxclients_arg), 
                 &(args_info->maxclients_orig), &(args_info->maxclients_given),
                &(local_args_info.maxclients_given), optarg, 0, "512", ARG_INT,
                check_ambiguity, override, 0, 0,
                "maxclients", '-',
                additional_error))
              goto failure;
          
          }
          /* Size of DHCP/MAC hash table.  */
          else if (strcmp (long_options[option_index].name, "dhcphashsize") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->dhcphashsize_arg), 
                 &(args_info->dhcphashsize_orig), &(args_info->dhcphashsize_given),
                &(local_args_info.dhcphashsize_given), optarg, 0, "56", ARG_INT,
                check_ambiguity, override, 0, 0,
                "dhcphashsize", '-',
                additional_error))
              goto failure;
          
          }
          /* Size of RADIUS queue table.  */
          else if (strcmp (long_options[option_index].name, "radiusqsize") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->radiusqsize_arg), 
                 &(args_info->radiusqsize_orig), &(args_info->radiusqsize_given),
                &(local_args_info.radiusqsize_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "radiusqsize", '-',
                additional_error))
              goto failure;
          
          }
          /* Disable the use of the challenge (PAP only).  */
          else if (strcmp (long_options[option_index].name, "nochallenge") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->nochallenge_flag), 0, &(args_info->nochallenge_given),
                &(local_args_info.nochallenge_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "nochallenge", '-',
                additional_error))
              goto failure;
          
          }
          /* Timeout in seconds for the generated challenge.  */
          else if (strcmp (long_options[option_index].name, "challengetimeout") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->challengetimeout_arg), 
                 &(args_info->challengetimeout_orig), &(args_info->challengetimeout_given),
                &(local_args_info.challengetimeout_given), optarg, 0, "600", ARG_INT,
                check_ambiguity, override, 0, 0,
                "challengetimeout", '-',
                additional_error))
              goto failure;
          
          }
          /* Timeout in seconds for challenge during login.  */
          else if (strcmp (long_options[option_index].name, "challengetimeout2") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->challengetimeout2_arg), 
                 &(args_info->challengetimeout2_orig), &(args_info->challengetimeout2_given),
                &(local_args_info.challengetimeout2_given), optarg, 0, "1200", ARG_INT,
                check_ambiguity, override, 0, 0,
                "challengetimeout2", '-',
                additional_error))
              goto failure;
          
          }
          /* Enable redir (redirection) daemon.  */
          else if (strcmp (long_options[option_index].name, "redir") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->redir_flag), 0, &(args_info->redir_given),
                &(local_args_info.redir_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "redir", '-',
                additional_error))
              goto failure;
          
          }
          /* Enable redir injection.  */
          else if (strcmp (long_options[option_index].name, "inject") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->inject_arg), 
                 &(args_info->inject_orig), &(args_info->inject_given),
                &(local_args_info.inject_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "inject", '-',
                additional_error))
              goto failure;
          
          }
          /* Enable redir injection extended script.  */
          else if (strcmp (long_options[option_index].name, "injectext") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->injectext_arg), 
                 &(args_info->injectext_orig), &(args_info->injectext_given),
                &(local_args_info.injectext_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "injectext", '-',
                additional_error))
              goto failure;
          
          }
          /* Enable redir injection of WISPr.  */
          else if (strcmp (long_options[option_index].name, "injectwispr") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->injectwispr_flag), 0, &(args_info->injectwispr_given),
                &(local_args_info.injectwispr_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "injectwispr", '-',
                additional_error))
              goto failure;
          
          }
          /* Send redirection URL in UAM parameters instead of HTTP redirect.  */
          else if (strcmp (long_options[option_index].name, "redirurl") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->redirurl_flag), 0, &(args_info->redirurl_given),
                &(local_args_info.redirurl_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "redirurl", '-',
                additional_error))
              goto failure;
          
          }
          /* When using routeif, do one-to-one NAT.  */
          else if (strcmp (long_options[option_index].name, "routeonetone") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->routeonetone_flag), 0, &(args_info->routeonetone_given),
                &(local_args_info.routeonetone_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "routeonetone", '-',
                additional_error))
              goto failure;
          
          }
          /* Do not consider walled garden for authorized session accounting.  */
          else if (strcmp (long_options[option_index].name, "nousergardendata") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->nousergardendata_flag), 0, &(args_info->nousergardendata_given),
                &(local_args_info.nousergardendata_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "nousergardendata", '-',
                additional_error))
              goto failure;
          
          }
          /* Enable a RADIUS accounting session for walled garden data based on IP lease life-cycle.  */
          else if (strcmp (long_options[option_index].name, "uamgardendata") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->uamgardendata_flag), 0, &(args_info->uamgardendata_given),
                &(local_args_info.uamgardendata_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "uamgardendata", '-',
                additional_error))
              goto failure;
          
          }
          /* Enable accounting for dropped 'Other' of IP session.  */
          else if (strcmp (long_options[option_index].name, "uamotherdata") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->uamotherdata_flag), 0, &(args_info->uamotherdata_given),
                &(local_args_info.uamotherdata_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "uamotherdata", '-',
                additional_error))
              goto failure;
          
          }
          /* SSL private key file in PEM format.  */
          else if (strcmp (long_options[option_index].name, "sslkeyfile") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->sslkeyfile_arg), 
                 &(args_info->sslkeyfile_orig), &(args_info->sslkeyfile_given),
                &(local_args_info.sslkeyfile_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "sslkeyfile", '-',
                additional_error))
              goto failure;
          
          }
          /* SSL private key password.  */
          else if (strcmp (long_options[option_index].name, "sslkeypass") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->sslkeypass_arg), 
                 &(args_info->sslkeypass_orig), &(args_info->sslkeypass_given),
                &(local_args_info.sslkeypass_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "sslkeypass", '-',
                additional_error))
              goto failure;
          
          }
          /* SSL certificate file in PEM format.  */
          else if (strcmp (long_options[option_index].name, "sslcertfile") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->sslcertfile_arg), 
                 &(args_info->sslcertfile_orig), &(args_info->sslcertfile_given),
                &(local_args_info.sslcertfile_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "sslcertfile", '-',
                additional_error))
              goto failure;
          
          }
          /* SSL CA certificate file in PEM format.  */
          else if (strcmp (long_options[option_index].name, "sslcafile") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->sslcafile_arg), 
                 &(args_info->sslcafile_orig), &(args_info->sslcafile_given),
                &(local_args_info.sslcafile_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "sslcafile", '-',
                additional_error))
              goto failure;
          
          }
          /* The UNIX IPC Filename to use when compiled with --with-unixipc.  */
          else if (strcmp (long_options[option_index].name, "unixipc") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->unixipc_arg), 
                 &(args_info->unixipc_orig), &(args_info->unixipc_given),
                &(local_args_info.unixipc_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "unixipc", '-',
                additional_error))
              goto failure;
          
          }
          /* Enable to allow a HTTP POST to the standard uamport interface.  */
          else if (strcmp (long_options[option_index].name, "uamallowpost") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->uamallowpost_flag), 0, &(args_info->uamallowpost_given),
                &(local_args_info.uamallowpost_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "uamallowpost", '-',
                additional_error))
              goto failure;
          
          }
          /* IP to use when doing nat on WAN (routeidx).  */
          else if (strcmp (long_options[option_index].name, "natip") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->natip_arg), 
                 &(args_info->natip_orig), &(args_info->natip_given),
                &(local_args_info.natip_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "natip", '-',
                additional_error))
              goto failure;
          
          }
          /* Port to use when oding nat on the WAN (routeidx).  */
          else if (strcmp (long_options[option_index].name, "natport") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->natport_arg), 
                 &(args_info->natport_orig), &(args_info->natport_given),
                &(local_args_info.natport_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "natport", '-',
                additional_error))
              goto failure;
          
          }
          /* Enable redirection of SSL/HTTP port (requires SSL support).  */
          else if (strcmp (long_options[option_index].name, "redirssl") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->redirssl_flag), 0, &(args_info->redirssl_given),
                &(local_args_info.redirssl_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "redirssl", '-',
                additional_error))
              goto failure;
          
          }
          /* Enable SSL/HTTPS support on the uamuiport.  */
          else if (strcmp (long_options[option_index].name, "uamuissl") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->uamuissl_flag), 0, &(args_info->uamuissl_given),
                &(local_args_info.uamuissl_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "uamuissl", '-',
                additional_error))
              goto failure;
          
          }
          /* Log DNS requests to a file..  */
          else if (strcmp (long_options[option_index].name, "dnslog") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->dnslog_arg), 
                 &(args_info->dnslog_orig), &(args_info->dnslog_given),
                &(local_args_info.dnslog_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "dnslog", '-',
                additional_error))
              goto failure;
          
          }
          /* Binary IP White List file.  */
          else if (strcmp (long_options[option_index].name, "ipwhitelist") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->ipwhitelist_arg), 
                 &(args_info->ipwhitelist_orig), &(args_info->ipwhitelist_given),
                &(local_args_info.ipwhitelist_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "ipwhitelist", '-',
                additional_error))
              goto failure;
          
          }
          /* Load uamdomains (regex) from file.  */
          else if (strcmp (long_options[option_index].name, "uamdomainfile") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->uamdomainfile_arg), 
                 &(args_info->uamdomainfile_orig), &(args_info->uamdomainfile_given),
                &(local_args_info.uamdomainfile_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "uamdomainfile", '-',
                additional_error))
              goto failure;
          
          }
          /* Layer3 only.  */
          else if (strcmp (long_options[option_index].name, "layer3") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->layer3_flag), 0, &(args_info->layer3_given),
                &(local_args_info.layer3_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "layer3", '-',
                additional_error))
              goto failure;
          
          }
          /* List of allowed source IP addresses, for Layer3.  */
          else if (strcmp (long_options[option_index].name, "ipsrcallowed") == 0)
          {
          
            if (update_multiple_arg_temp(&ipsrcallowed_list, 
                &(local_args_info.ipsrcallowed_given), optarg, 0, 0, ARG_STRING,
                "ipsrcallowed", '-',
                additional_error))
              goto failure;
          
          }
          /* Use patricia tries for walled garden lookup.  */
          else if (strcmp (long_options[option_index].name, "patricia") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->patricia_flag), 0, &(args_info->patricia_given),
                &(local_args_info.patricia_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "patricia", '-',
                additional_error))
              goto failure;
          
          }
          /* Send DNS query on redirect to pick of DNS based walled garden.  */
          else if (strcmp (long_options[option_index].name, "redirdnsreq") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->redirdnsreq_flag), 0, &(args_info->redirdnsreq_given),
                &(local_args_info.redirdnsreq_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "redirdnsreq", '-',
                additional_error))
              goto failure;
          
          }
          /* Enable the use of the coova kernel module instance of this namem.  */
          else if (strcmp (long_options[option_index].name, "kname") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->kname_arg), 
                 &(args_info->kname_orig), &(args_info->kname_given),
                &(local_args_info.kname_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "kname", '-',
                additional_error))
              goto failure;
          
          }
          /* Directory for dynamically loaded modules.  */
          else if (strcmp (long_options[option_index].name, "moddir") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->moddir_arg), 
                 &(args_info->moddir_orig), &(args_info->moddir_given),
                &(local_args_info.moddir_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "moddir", '-',
                additional_error))
              goto failure;
          
          }
          /* Dynamically loaded module.  */
          else if (strcmp (long_options[option_index].name, "module") == 0)
          {
          
            if (update_multiple_arg_temp(&module_list, 
                &(local_args_info.module_given), optarg, 0, 0, ARG_STRING,
                "module", '-',
                additional_error))
              goto failure;
          
          }
          /* Set a DHCP option using a hex string.  */
          else if (strcmp (long_options[option_index].name, "dhcpopt") == 0)
          {
          
            if (update_multiple_arg_temp(&dhcpopt_list, 
                &(local_args_info.dhcpopt_given), optarg, 0, 0, ARG_STRING,
                "dhcpopt", '-',
                additional_error))
              goto failure;
          
          }
          /* Extended administrative-user VSA script support.  */
          else if (strcmp (long_options[option_index].name, "extadmvsa") == 0)
          {
          
            if (update_multiple_arg_temp(&extadmvsa_list, 
                &(local_args_info.extadmvsa_given), optarg, 0, 0, ARG_STRING,
                "extadmvsa", '-',
                additional_error))
              goto failure;
          
          }
          /* DHCP counted for preventing idle-timeout.  */
          else if (strcmp (long_options[option_index].name, "dhcpnotidle") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->dhcpnotidle_flag), 0, &(args_info->dhcpnotidle_given),
                &(local_args_info.dhcpnotidle_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "dhcpnotidle", '-',
                additional_error))
              goto failure;
          
          }
          /* Force all DNS to a specific address.  */
          else if (strcmp (long_options[option_index].name, "forcedns1") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->forcedns1_arg), 
                 &(args_info->forcedns1_orig), &(args_info->forcedns1_given),
                &(local_args_info.forcedns1_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "forcedns1", '-',
                additional_error))
              goto failure;
          
          }
          /* Force all DNS to a specific port.  */
          else if (strcmp (long_options[option_index].name, "forcedns1port") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->forcedns1port_arg), 
                 &(args_info->forcedns1port_orig), &(args_info->forcedns1port_given),
                &(local_args_info.forcedns1port_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "forcedns1port", '-',
                additional_error))
              goto failure;
          
          }
          /* Force all secondary DNS to a specific address.  */
          else if (strcmp (long_options[option_index].name, "forcedns2") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->forcedns2_arg), 
                 &(args_info->forcedns2_orig), &(args_info->forcedns2_given),
                &(local_args_info.forcedns2_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "forcedns2", '-',
                additional_error))
              goto failure;
          
          }
          /* Force all secondary DNS to a specific port.  */
          else if (strcmp (long_options[option_index].name, "forcedns2port") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->forcedns2port_arg), 
                 &(args_info->forcedns2port_orig), &(args_info->forcedns2port_given),
                &(local_args_info.forcedns2port_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "forcedns2port", '-',
                additional_error))
              goto failure;
          
          }
          /* Enable DNS servers per session.  */
          else if (strcmp (long_options[option_index].name, "dnspersession") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->dnspersession_flag), 0, &(args_info->dnspersession_given),
                &(local_args_info.dnspersession_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "dnspersession", '-',
                additional_error))
              goto failure;
          
          }
          /* Enable IPv6 support.  */
          else if (strcmp (long_options[option_index].name, "ipv6") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->ipv6_flag), 0, &(args_info->ipv6_given),
                &(local_args_info.ipv6_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "ipv6", '-',
                additional_error))
              goto failure;
          
          }
          /* IPv6 mode is either 6and4 (default), 4to6, or 6to4.  */
          else if (strcmp (long_options[option_index].name, "ipv6mode") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->ipv6mode_arg), 
                 &(args_info->ipv6mode_orig), &(args_info->ipv6mode_given),
                &(local_args_info.ipv6mode_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "ipv6mode", '-',
                additional_error))
              goto failure;
          
          }
          /* Enable IPv6-Only.  */
          else if (strcmp (long_options[option_index].name, "ipv6only") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->ipv6only_flag), 0, &(args_info->ipv6only_given),
                &(local_args_info.ipv6only_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "ipv6only", '-',
                additional_error))
              goto failure;
          
          }
          
          break;
        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          goto failure;

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c%s\n", CMDLINE_PARSER_PACKAGE, c, (additional_error ? additional_error : ""));
          abort ();
        } /* switch */
    } /* while */


  update_multiple_arg((void *)&(args_info->proxylocattr_arg),
    &(args_info->proxylocattr_orig), args_info->proxylocattr_given,
    local_args_info.proxylocattr_given, 0,
    ARG_STRING, proxylocattr_list);
  update_multiple_arg((void *)&(args_info->moreif_arg),
    &(args_info->moreif_orig), args_info->moreif_given,
    local_args_info.moreif_given, 0,
    ARG_STRING, moreif_list);
  update_multiple_arg((void *)&(args_info->uamallowed_arg),
    &(args_info->uamallowed_orig), args_info->uamallowed_given,
    local_args_info.uamallowed_given, 0,
    ARG_STRING, uamallowed_list);
  update_multiple_arg((void *)&(args_info->uamdomain_arg),
    &(args_info->uamdomain_orig), args_info->uamdomain_given,
    local_args_info.uamdomain_given, 0,
    ARG_STRING, uamdomain_list);
  update_multiple_arg((void *)&(args_info->uamregex_arg),
    &(args_info->uamregex_orig), args_info->uamregex_given,
    local_args_info.uamregex_given, 0,
    ARG_STRING, uamregex_list);
  update_multiple_arg((void *)&(args_info->authedallowed_arg),
    &(args_info->authedallowed_orig), args_info->authedallowed_given,
    local_args_info.authedallowed_given, 0,
    ARG_STRING, authedallowed_list);
  update_multiple_arg((void *)&(args_info->macallowed_arg),
    &(args_info->macallowed_orig), args_info->macallowed_given,
    local_args_info.macallowed_given, 0,
    ARG_STRING, macallowed_list);
  update_multiple_arg((void *)&(args_info->ipsrcallowed_arg),
    &(args_info->ipsrcallowed_orig), args_info->ipsrcallowed_given,
    local_args_info.ipsrcallowed_given, 0,
    ARG_STRING, ipsrcallowed_list);
  update_multiple_arg((void *)&(args_info->module_arg),
    &(args_info->module_orig), args_info->module_given,
    local_args_info.module_given, 0,
    ARG_STRING, module_list);
  update_multiple_arg((void *)&(args_info->dhcpopt_arg),
    &(args_info->dhcpopt_orig), args_info->dhcpopt_given,
    local_args_info.dhcpopt_given, 0,
    ARG_STRING, dhcpopt_list);
  update_multiple_arg((void *)&(args_info->extadmvsa_arg),
    &(args_info->extadmvsa_orig), args_info->extadmvsa_given,
    local_args_info.extadmvsa_given, 0,
    ARG_STRING, extadmvsa_list);

  args_info->proxylocattr_given += local_args_info.proxylocattr_given;
  local_args_info.proxylocattr_given = 0;
  args_info->moreif_given += local_args_info.moreif_given;
  local_args_info.moreif_given = 0;
  args_info->uamallowed_given += local_args_info.uamallowed_given;
  local_args_info.uamallowed_given = 0;
  args_info->uamdomain_given += local_args_info.uamdomain_given;
  local_args_info.uamdomain_given = 0;
  args_info->uamregex_given += local_args_info.uamregex_given;
  local_args_info.uamregex_given = 0;
  args_info->authedallowed_given += local_args_info.authedallowed_given;
  local_args_info.authedallowed_given = 0;
  args_info->macallowed_given += local_args_info.macallowed_given;
  local_args_info.macallowed_given = 0;
  args_info->ipsrcallowed_given += local_args_info.ipsrcallowed_given;
  local_args_info.ipsrcallowed_given = 0;
  args_info->module_given += local_args_info.module_given;
  local_args_info.module_given = 0;
  args_info->dhcpopt_given += local_args_info.dhcpopt_given;
  local_args_info.dhcpopt_given = 0;
  args_info->extadmvsa_given += local_args_info.extadmvsa_given;
  local_args_info.extadmvsa_given = 0;
  
  if (check_required)
    {
      error_occurred += cmdline_parser_required2 (args_info, argv[0], additional_error);
    }

  cmdline_parser_release (&local_args_info);

  if ( error_occurred )
    return (EXIT_FAILURE);

  return 0;

failure:
  free_list (proxylocattr_list, 1 );
  free_list (moreif_list, 1 );
  free_list (uamallowed_list, 1 );
  free_list (uamdomain_list, 1 );
  free_list (uamregex_list, 1 );
  free_list (authedallowed_list, 1 );
  free_list (macallowed_list, 1 );
  free_list (ipsrcallowed_list, 1 );
  free_list (module_list, 1 );
  free_list (dhcpopt_list, 1 );
  free_list (extadmvsa_list, 1 );
  
  cmdline_parser_release (&local_args_info);
  return (EXIT_FAILURE);
}

#ifndef CONFIG_FILE_LINE_SIZE
#define CONFIG_FILE_LINE_SIZE 2048
#endif
#define ADDITIONAL_ERROR " in configuration file "

#define CONFIG_FILE_LINE_BUFFER_SIZE (CONFIG_FILE_LINE_SIZE+3)
/* 3 is for "--" and "=" */

static int
_cmdline_parser_configfile (const char *filename, int *my_argc)
{
  FILE* file;
  char my_argv[CONFIG_FILE_LINE_BUFFER_SIZE+1];
  char linebuf[CONFIG_FILE_LINE_SIZE];
  int line_num = 0;
  int result = 0, equal;
  char *fopt, *farg;
  char *str_index;
  size_t len, next_token;
  char delimiter;

  if ((file = fopen(filename, "r")) == 0)
    {
      fprintf (stderr, "%s: Error opening configuration file '%s'\n",
               CMDLINE_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  while ((fgets(linebuf, CONFIG_FILE_LINE_SIZE, file)) != 0)
    {
      ++line_num;
      my_argv[0] = '\0';
      len = strlen(linebuf);
      if (len > (CONFIG_FILE_LINE_BUFFER_SIZE-1))
        {
          fprintf (stderr, "%s:%s:%d: Line too long in configuration file\n",
                   CMDLINE_PARSER_PACKAGE, filename, line_num);
          result = EXIT_FAILURE;
          break;
        }

      /* find first non-whitespace character in the line */
      next_token = strspn (linebuf, " \t\r\n");
      str_index  = linebuf + next_token;

      if ( str_index[0] == '\0' || str_index[0] == '#')
        continue; /* empty line or comment line is skipped */

      fopt = str_index;

      /* truncate fopt at the end of the first non-valid character */
      next_token = strcspn (fopt, " \t\r\n=");

      if (fopt[next_token] == '\0') /* the line is over */
        {
          farg  = 0;
          equal = 0;
          goto noarg;
        }

      /* remember if equal sign is present */
      equal = (fopt[next_token] == '=');
      fopt[next_token++] = '\0';

      /* advance pointers to the next token after the end of fopt */
      next_token += strspn (fopt + next_token, " \t\r\n");

      /* check for the presence of equal sign, and if so, skip it */
      if ( !equal )
        if ((equal = (fopt[next_token] == '=')))
          {
            next_token++;
            next_token += strspn (fopt + next_token, " \t\r\n");
          }
      str_index  += next_token;

      /* find argument */
      farg = str_index;
      if ( farg[0] == '\"' || farg[0] == '\'' )
        { /* quoted argument */
          str_index = strchr (++farg, str_index[0] ); /* skip opening quote */
          if (! str_index)
            {
              fprintf
                (stderr,
                 "%s:%s:%d: unterminated string in configuration file\n",
                 CMDLINE_PARSER_PACKAGE, filename, line_num);
              result = EXIT_FAILURE;
              break;
            }
        }
      else
        { /* read up the remaining part up to a delimiter */
          next_token = strcspn (farg, " \t\r\n#\'\"");
          str_index += next_token;
        }

      /* truncate farg at the delimiter and store it for further check */
      delimiter = *str_index, *str_index++ = '\0';

      /* everything but comment is illegal at the end of line */
      if (delimiter != '\0' && delimiter != '#')
        {
          str_index += strspn(str_index, " \t\r\n");
          if (*str_index != '\0' && *str_index != '#')
            {
              fprintf
                (stderr,
                 "%s:%s:%d: malformed string in configuration file\n",
                 CMDLINE_PARSER_PACKAGE, filename, line_num);
              result = EXIT_FAILURE;
              break;
            }
        }

    noarg:
      if (!strcmp(fopt,"include")) {
        if (farg && *farg) {
          result = _cmdline_parser_configfile(farg, my_argc);
        } else {
          fprintf(stderr, "%s:%s:%d: include requires a filename argument.\n",
                  CMDLINE_PARSER_PACKAGE, filename, line_num);
        }
        continue;
      }
      len = strlen(fopt);
      strcat (my_argv, len > 1 ? "--" : "-");
      strcat (my_argv, fopt);
      if (len > 1 && ((farg && *farg) || equal))
        strcat (my_argv, "=");
      if (farg && *farg)
        strcat (my_argv, farg);
      ++(*my_argc);

      cmd_line_list_tmp = (struct line_list *) malloc (sizeof (struct line_list));
      cmd_line_list_tmp->next = cmd_line_list;
      cmd_line_list = cmd_line_list_tmp;
      cmd_line_list->string_arg = gengetopt_strdup(my_argv);
    } /* while */

  if (file)
    fclose(file);
  return result;
}

int
cmdline_parser_configfile (
  const char *filename,
                           struct gengetopt_args_info *args_info,
                           int override, int initialize, int check_required)
{
  struct cmdline_parser_params params;

  params.override = override;
  params.initialize = initialize;
  params.check_required = check_required;
  params.check_ambiguity = 0;
  params.print_errors = 1;
  
  return cmdline_parser_config_file (filename, args_info, &params);
}

int
cmdline_parser_config_file (const char *filename,
                           struct gengetopt_args_info *args_info,
                           struct cmdline_parser_params *params)
{
  int i, result;
  int my_argc = 1;
  char **my_argv_arg;
  char *additional_error;

  /* store the program name */
  cmd_line_list_tmp = (struct line_list *) malloc (sizeof (struct line_list));
  cmd_line_list_tmp->next = cmd_line_list;
  cmd_line_list = cmd_line_list_tmp;
  cmd_line_list->string_arg = gengetopt_strdup (CMDLINE_PARSER_PACKAGE);

  result = _cmdline_parser_configfile(filename, &my_argc);

  if (result != EXIT_FAILURE) {
    my_argv_arg = (char **) malloc((my_argc+1) * sizeof(char *));
    cmd_line_list_tmp = cmd_line_list;

    for (i = my_argc - 1; i >= 0; --i) {
      my_argv_arg[i] = cmd_line_list_tmp->string_arg;
      cmd_line_list_tmp = cmd_line_list_tmp->next;
    }

    my_argv_arg[my_argc] = 0;

    additional_error = (char *)malloc(strlen(filename) + strlen(ADDITIONAL_ERROR) + 1);
    strcpy (additional_error, ADDITIONAL_ERROR);
    strcat (additional_error, filename);
    result =
      cmdline_parser_internal (my_argc, my_argv_arg, args_info,
                              params,
                              additional_error);

    free (additional_error);
    free (my_argv_arg);
  }

  free_cmd_list();
  if (result == EXIT_FAILURE)
    {
      cmdline_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}
